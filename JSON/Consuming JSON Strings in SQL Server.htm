<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html style="height: 100%;" xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/shares.json" type="text/javascript"></script><script async="" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/cbgapi.loaded_0"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/auth014.js" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/counter016.js" type="text/javascript"></script><link media="all" href="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/counter013.css" type="text/css" rel="stylesheet"><script gapi_processed="true" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/plusone.js" type="text/javascript"></script><link media="all" href="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/widget115.css" type="text/css" rel="stylesheet"><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/ga.js" async="" type="text/javascript"></script>
    <link rel="stylesheet" href="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/main.css" type="text/css">
    <link rel="stylesheet" href="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/content.css" type="text/css">
    
      <link rel="stylesheet" href="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/sql.css" type="text/css">
    
    <!--[if lt IE 9]>
      <script src="/static/versioned/c42155be65838a3ecf77bfc6caf1ee7f/js/lib/html5shiv-printshiv.js"></script>
    <![endif]-->
    
  <meta description="It has always seemed strange to Phil that SQL Server has such complete support for XML, yet is completely devoid of any support for JSON. In the end, he was forced, by a website project, into doing something about it. The result is this article, an iconoclastic romp around the representation of hierarchical structures, and some code to get you started.">
  <meta keywords="Phil Factor, T SQL">
<title>
	Consuming JSON Strings in SQL Server
</title><link href="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/translateelement.css" charset="UTF-8" rel="stylesheet" type="text/css"><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/main_ru.js" charset="UTF-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/main.js" data-requiremodule="main" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/element_main.js" charset="UTF-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/rss.js" data-requiremodule="rss" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/corner-peel.js" data-requiremodule="corner-peel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/ajax-comment-delete.js" data-requiremodule="ajax-comment-delete" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/audio-polyfill.js" data-requiremodule="audio-polyfill" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/newsletter-subscriber.js" data-requiremodule="newsletter-subscriber" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/analytics.js" data-requiremodule="analytics" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/jquery.js" data-requiremodule="jquery" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/mediaelement-and-player.js" data-requiremodule="mediaelement" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><div id="_atssh" style="visibility: hidden; height: 1px; width: 1px; position: absolute; z-index: 100000;"><iframe src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/sh126.htm" style="height: 1px; width: 1px; position: absolute; z-index: 100000; border: 0px none; left: 0px; top: 0px;" title="AddThis utility frame" id="_atssh387"></iframe></div><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/core086.js" type="text/javascript"></script></head>
<body style="position: relative; min-height: 100%; top: 40px;"><div class="skiptranslate" style=""><iframe id=":1.container" class="goog-te-banner-frame skiptranslate" src="javascript:''" style="visibility:visible" frameborder="0"></iframe></div>
  <div id="corner-peel">
	  <a href="http://www.red-gate.com/sqlmonitor-simpletalk" rel="nofollow">
      <img class="vvcazwkfplsumfhyzrge" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/corner-peel.png" alt="Click here to monitor SSC">
    </a>
	  <div id="corner-peel-behind"></div>
  </div>

  <div class="site">
    <div class="page">
      

<div class="site-header">
  <div class="site-logo">
    <a href="https://www.simple-talk.com/">
      <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/simple-talk-logo.png" alt="Simple-Talk">
    </a>
  </div>
        
  <div class="site-tagline">
    A technical journal and community hub from Red Gate
  </div>

	<div class="red-gate-logo">
	  <a href="http://www.red-gate.com/?utm_source=simpletalk&amp;utm_medium=textad&amp;utm_campaign=homepage">
	  	<img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/red-gate-logo.png" alt="Red Gate">
	  </a>
	</div>
  
  <div class="account-nav account-nav-anonymous">
      <a href="https://www.simple-talk.com/community/user/CreateUser.aspx?ReturnUrl=%2fsql%2ft-sql-programming%2fconsuming-json-strings-in-sql-server%2f">Join Simple-Talk</a>
      <a href="https://www.simple-talk.com/community/login.aspx?ReturnUrl=%2fsql%2ft-sql-programming%2fconsuming-json-strings-in-sql-server%2f">Sign in</a>
  </div>

</div>
      

<div class="mainnav nav">
  <ul class="primarynav">
    
      <li>
        <a href="https://www.simple-talk.com/">Home</a>
      </li>
    
      <li>
        <a href="https://www.simple-talk.com/sql/" class="on">SQL</a>
      </li>
    
      <li>
        <a href="https://www.simple-talk.com/dotnet/">.NET</a>
      </li>
    
      <li>
        <a href="https://www.simple-talk.com/cloud/">Cloud</a>
      </li>
    
      <li>
        <a href="https://www.simple-talk.com/sysadmin/">SysAdmin</a>
      </li>
    
      <li>
        <a href="https://www.simple-talk.com/opinion/">Opinion</a>
      </li>
    
      <li>
        <a href="https://www.simple-talk.com/books/">Books</a>
      </li>
    
      <li>
        <a href="https://www.simple-talk.com/blogs/">Blogs</a>
      </li>
    
      <li>
        <a href="https://www.simple-talk.com/community/forums/">Forums</a>
      </li>
    
  </ul>

  <div class="site-search">
    
      <form action="/search/" method="get">
    
			  <input name="search" placeholder="Search…" type="text">
        <button type="submit" class="search-button">
          <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/search.png" alt="Search">
        </button>
		
      </form>
    
  </div>
</div>
<div class="subnav nav">
  <ul>
    
        <li>
          <a id="ctl00_Navigation1_repSubMenu_ctl00_lnkItem" href="https://www.simple-talk.com/sql/">SQL Home</a>
        </li>
      
        <li>
          <a id="ctl00_Navigation1_repSubMenu_ctl01_lnkItem" href="https://www.simple-talk.com/sql/t-sql-programming/">T-SQL Programming</a>
        </li>
      
        <li>
          <span class="inactive-link ">Consuming JSON Strings in SQL Server</span>
        </li>
      
  </ul>
</div>
      <div class="maincontent">
        
  <div class="article">
  
    <div id="ctl00_MainContent_panSummary" class="summarybox">
	
      <ul>
        <li>Av rating: <img id="ctl00_MainContent_imgRating1" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/icon_plain_4stars.gif" style="height:13px;width:70px;border-width:0px;"></li>
        <li>Total votes: 55</li>
        <li>Total comments: 21</li>
      </ul>
      <ul>
        <li><img id="ctl00_MainContent_imgEmail" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/icon_email_13x11.gif" style="height:11px;width:14px;border-width:0px;">&nbsp;<a id="ctl00_MainContent_lnkEmail" href="https://www.simple-talk.com/content/email.aspx?article=1176">send to a friend</a></li>
		    <li><img id="ctl00_MainContent_imgPrint" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/icon_print_13x11.gif" style="height:11px;width:14px;border-width:0px;">&nbsp;<a id="ctl00_MainContent_lnkPrint" href="https://www.simple-talk.com/content/print.aspx?article=1176" target="_blank">printer friendly version</a></li>
      </ul>
      <ul>
        <li>
          
    <img id="ctl00_MainContent_RelatedFiles1_repFiles_ctl00_imgDownload" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/icon_code_14x11.gif" style="height:11px;width:14px;border-width:0px;"> Downloads
    <ul>
  
    <li><a id="ctl00_MainContent_RelatedFiles1_repFiles_ctl01_lnkLink" href="https://www.simple-talk.com/content/file.ashx?file=4373">JSONXML.sql</a></li>
  
    <li><a id="ctl00_MainContent_RelatedFiles1_repFiles_ctl02_lnkLink" href="https://www.simple-talk.com/content/file.ashx?file=6673">JSON-tsql2.sql</a></li>
  
    </ul>
  

        </li>
      </ul>
	
</div>

    <br><br>
    <img id="ctl00_MainContent_imgAuthor" class="authorpicture" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/3.gif" alt="Phil Factor" style="border-width:0px;" align="left">
    <div class="articletitle">Consuming JSON Strings in SQL Server</div>
    <div class="date">15 November 2010</div>
    <div class="author">by <a id="ctl00_MainContent_lnkAuthor" rel="author" href="https://www.simple-talk.com/author/phil-factor/">Phil Factor</a></div>

    <div class="clear"></div>

    
<style type="text/css">#pretty {
	
}
#pretty .codeblue {
	COLOR: blue
}
#pretty .codebrown {
	COLOR: brown
}
#pretty .codedarkred {
	COLOR: darkred
}
#pretty .codegray {
	COLOR: gray
}
#pretty .codegreen {
	COLOR: green
}
#pretty .codemagenta {
	COLOR: magenta
}
#pretty .codered {
	COLOR: red
}
#pretty .indented {
	MARGIN-LEFT: 80px
}
#pretty .listing {
	BORDER-BOTTOM: #cacaca 1px solid; TEXT-ALIGN: left; BORDER-LEFT: #cacaca 1px solid; PADDING-BOTTOM: 10px; BACKGROUND-COLOR: #f9f9f9; PADDING-LEFT: 3px; PADDING-RIGHT: 3px; FONT-FAMILY: "Courier New", Courier, monospace; MARGIN-LEFT: 20px; FONT-SIZE: 11px; BORDER-TOP: #cacaca 1px solid; FONT-WEIGHT: normal; BORDER-RIGHT: #cacaca 1px solid; PADDING-TOP: 10px
}
#pretty .monospaced {
	
}
#pretty .pullout {
	BORDER-BOTTOM: blue 1px solid; TEXT-ALIGN: left; BORDER-LEFT: #766b7b 1px solid; PADDING-BOTTOM: 10px; BACKGROUND-COLOR: #fbfbfd; PADDING-LEFT: 10px; WIDTH: 350px; PADDING-RIGHT: 10px; FLOAT: right; MARGIN-LEFT: 10px; BORDER-TOP: #786d7d 1px solid; MARGIN-RIGHT: 0px; BORDER-RIGHT: #706573 1px solid; PADDING-TOP: 10px
}
#pretty .pullout P {
	MARGIN-LEFT: 0px
}
#pretty .tablecontents {
	FONT-SIZE: 13px; FONT-WEIGHT: bold
}
#pretty BLOCKQUOTE {
	TEXT-ALIGN: justify; FONT-STYLE: italic; FONT-FAMILY: Arial, Helvetica, sans-serif; MARGIN-LEFT: 50px; FONT-SIZE: 12px; MARGIN-RIGHT: 50px
}
#pretty BLOCKQUOTE DIV.listing {
	BORDER-BOTTOM: 0px; TEXT-ALIGN: left; BORDER-LEFT: 0px; PADDING-BOTTOM: 10px; BACKGROUND-COLOR: white; PADDING-LEFT: 3px; PADDING-RIGHT: 3px; FONT-FAMILY: "Courier New", Courier, monospace; MARGIN-LEFT: 20px; FONT-SIZE: 11px; BORDER-TOP: 0px; FONT-WEIGHT: normal; BORDER-RIGHT: 0px; PADDING-TOP: 10px
}
#pretty DD {
	MARGIN-TOP: 10px; MARGIN-LEFT: 170px
}
#pretty DIV.code {
	BORDER-BOTTOM: silver 1px solid; TEXT-ALIGN: left; BORDER-LEFT: silver 1px solid; PADDING-BOTTOM: 10px; BACKGROUND-COLOR: whitesmoke; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; FONT-FAMILY: "Courier New", Courier, monospace; MARGIN-LEFT: 0px; FONT-SIZE: 12px; BORDER-TOP: silver 1px solid; BORDER-RIGHT: silver 1px solid; PADDING-TOP: 10px
}
#pretty DIV.illustration {
	MARGIN-BOTTOM: 20px
}
#pretty DIV.indent {
	MARGIN-LEFT: 20px
}
#pretty PRE.inline {
	MARGIN-LEFT: 20px
}
#pretty DIV.listing P {
	TEXT-ALIGN: left; PADDING-BOTTOM: 0px; MARGIN-TOP: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: "Courier New", Courier, monospace; MARGIN-BOTTOM: 0px; MARGIN-LEFT: 0px; FONT-SIZE: 11px; PADDING-TOP: 0px
}
#pretty DIV.note {
	BORDER-BOTTOM: medium none; BORDER-LEFT: gray 2.25pt solid; PADDING-BOTTOM: 0in; PADDING-LEFT: 6pt; PADDING-RIGHT: 0in; MARGIN-LEFT: 28.35pt; BORDER-TOP: medium none; MARGIN-RIGHT: 0in; BORDER-RIGHT: medium none; PADDING-TOP: 0in
}
#pretty DIV.note P.note {
	MARGIN-LEFT: 0in
}
#pretty DL {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, Helvetica, sans-serif; MARGIN-LEFT: 20px; FONT-SIZE: 12px
}
#pretty P {
	TEXT-ALIGN: justify; FONT-FAMILY: Arial, Helvetica, sans-serif; MARGIN-LEFT: 20px; FONT-SIZE: 12px
}
#pretty DT {
	MARGIN-TOP: 10px; WIDTH: 150px; FLOAT: left; CLEAR: both; FONT-WEIGHT: bold
}
#pretty FIELDSET {
	BORDER-BOTTOM: #cacaca 1px solid; TEXT-ALIGN: left; BORDER-LEFT: #cacaca 1px solid; PADDING-BOTTOM: 10px; BACKGROUND-COLOR: #f2f2f2; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; FONT-FAMILY: "Courier New", Courier, monospace; MARGIN-LEFT: 20px; FONT-SIZE: 12px; BORDER-TOP: #cacaca 1px solid; FONT-WEIGHT: normal; BORDER-RIGHT: #cacaca 1px solid; PADDING-TOP: 10px
}
#pretty H1 {
	FONT-FAMILY: "Times New Roman", Times, serif; MARGIN-LEFT: 0px; FONT-SIZE: 145%
}
#pretty H2 {
	FONT-FAMILY: "Times New Roman", Times, serif; MARGIN-LEFT: 20px; FONT-SIZE: 130%
}
#pretty H3 {
	FONT-FAMILY: "Times New Roman", Times, serif; MARGIN-LEFT: 40px; FONT-SIZE: 115%
}
#pretty H4 {
	FONT-FAMILY: "Times New Roman", Times, serif; MARGIN-LEFT: 40px
}
#pretty HR {
	BORDER-BOTTOM: thin; BORDER-TOP: #d2d2d2 1px dotted
}
#pretty LEGEND {
	TEXT-ALIGN: left; PADDING-BOTTOM: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; FONT-FAMILY: "Times New Roman", Times, serif; MARGIN-LEFT: 20px; FONT-SIZE: 14px; PADDING-TOP: 10px
}
#pretty LI {
	TEXT-ALIGN: justify; MARGIN-TOP: 0px; FONT-FAMILY: Arial, Helvetica, sans-serif; MARGIN-BOTTOM: 3px; MARGIN-LEFT: 20px; FONT-SIZE: 12px
}
#pretty P.caption {
	TEXT-ALIGN: left; MARGIN-TOP: 0px; MARGIN-LEFT: 20px; FONT-SIZE: 11px; FONT-WEIGHT: bold
}
#pretty P.illustration {
	TEXT-ALIGN: center; MARGIN-BOTTOM: 0px; MARGIN-LEFT: 0px
}
#pretty P.note {
	BORDER-BOTTOM: silver 1px solid; TEXT-ALIGN: left; BORDER-LEFT: silver 1px solid; PADDING-BOTTOM: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; MARGIN-LEFT: 80px; BORDER-TOP: silver 1px solid; BORDER-RIGHT: silver 1px solid; PADDING-TOP: 10px
}
#pretty P.quote {
	BORDER-BOTTOM: silver 1px solid; TEXT-ALIGN: left; PADDING-BOTTOM: 15px; LINE-HEIGHT: 15px; PADDING-RIGHT: 0px; FLOAT: right; MARGIN-LEFT: 10px; FONT-SIZE: 17px; BORDER-TOP: silver 2px solid; FONT-WEIGHT: bold; MARGIN-RIGHT: 10px; BORDER-RIGHT: medium none; PADDING-TOP: 10px
}
#pretty P.start:first-letter {
	LINE-HEIGHT: 100%; FLOAT: left; FONT-SIZE: 280%
}
#pretty PRE {
	BORDER-BOTTOM: silver 1px solid; TEXT-ALIGN: left; BORDER-LEFT: silver 1px solid; PADDING-BOTTOM: 10px; BACKGROUND-COLOR: whitesmoke; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; MARGIN-LEFT: 0px; BORDER-TOP: silver 1px solid; BORDER-RIGHT: silver 1px solid; PADDING-TOP: 10px
}
#pretty SPAN.codeblack {
	COLOR: black
}
#pretty SPAN.mono {
	FONT-FAMILY: "Courier New", Courier, monospace; FONT-WEIGHT: bold
}
#pretty TABLE {
	BORDER-BOTTOM: #cacaca 1px solid; BORDER-LEFT: #cacaca 1px solid; MARGIN-LEFT: 20px; BORDER-TOP: #cacaca 1px solid; BORDER-RIGHT: #cacaca 1px solid
}
#pretty TABLE LI {
	TEXT-ALIGN: left; MARGIN-LEFT: 5px; FONT-SIZE: 11px
}
#pretty TABLE OL {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; MARGIN-LEFT: 15px; PADDING-TOP: 0px
}
#pretty TABLE P {
	MARGIN: 0px 5px; FONT-SIZE: 11px
}
#pretty TABLE TD {
	FONT-SIZE: 11px
}
#pretty TABLE UL {
	MARGIN-LEFT: 10px
}
#pretty UL {
	MARGIN-TOP: 0px
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
.CodeInText {
	FONT-FAMILY: courier new, courier, monospaced; FONT-WEIGHT: bold
}
.ImportantWords {
	FONT-WEIGHT: bold
}
.ScreenText {
	FONT-FAMILY: Century Gothic, Tahoma, Lucida Sans, sans-serif
}
PRE {
	BACKGROUND-COLOR: #d6d6d6
}
</style>
Updated 2nd May 2013 
<div id="pretty">
<p class="note">It has always seemed strange to Phil that SQL Server has
 such complete support for XML, yet is completely devoid of any support 
for JSON. In the end, he was forced, by a website project, into doing 
something about it. The result is this article, an iconoclastic romp 
around the representation of hierarchical structures, and some code to 
get you started.</p>
<div class="indent">
<p style="MARGIN-BOTTOM: 0px"><i>"The best thing about XML is what it 
shares with JSON, being human readable. That turns out to be important, 
not because people should be reading it, because we shouldn't, but 
because it avoids interoperability problems caused by fussy binary 
encoding issues. <br><br>Beyond that, there is not much to like. It is 
not very good as a data format. And it is not very good as a document 
format. If it were a good document format, then wikis would use it."</i></p>
<p style="TEXT-ALIGN: right" class="caption">Doug Crockford <a href="http://www.simple-talk.com/opinion/geek-of-the-week/doug-crockford-geek-of-the-week/">March 2010</a></p></div>
<p class="start">This article describes a TSQL JSON parser and its evil 
twin, a JSON outputter, and provides the source. It is also designed to 
illustrate a number of string manipulation techniques in TSQL. With it 
you can do things like this to extract the data from a JSON document:</p>
<div class="listing"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">Select</span> <span style="COLOR: gray">*</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">from</span> parseJSON<span style="COLOR: gray">(</span><span style="COLOR: red">'{ </span>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp; </span>"Person": </span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp; </span>{</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span>"firstName": "John",</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span>"lastName": "Smith",</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span>"age": 25,</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span>"Address": </span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span>{</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"streetAddress":"21 2nd Street",</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"city":"New York",</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"state":"NY",</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"postalCode":"10021"</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span>},</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span>"PhoneNumbers": </span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span>{</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"home":"212 555-1234",</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"fax":"646 555-4567"</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span>}</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp; </span>}</span></p>
<p class="MsoNormal"><span style="COLOR: gray">}</span></p>
<p class="MsoNormal"><span style="LINE-HEIGHT: 115%; COLOR: red">'</span><span style="LINE-HEIGHT: 115%; COLOR: gray">)</span></p></div>
<p>And get:</p>
<p class="illustration"><img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/1176-JSON1.jpg"></p>
<p>...or you can do the round trip:</p>
<div class="listing"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">DECLARE</span> @MyHierarchy JSONHierarchy 
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">INSERT</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">INTO</span> @myHierarchy </p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">select</span> <span style="COLOR: gray">*</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">from</span> parseJSON<span style="COLOR: gray">(</span><span style="COLOR: red">'{"menu": {</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp; </span>"id": "file",</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp; </span>"value": "File",</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp; </span>"popup": {</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp; </span>"menuitem": [</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{"value": "New", "onclick": "CreateNewDoc()"},</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{"value": "Open", "onclick": "OpenDoc()"},</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{"value": "Close", "onclick": "CloseDoc()"}</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp;&nbsp;&nbsp; </span>]</span></p>
<p class="MsoNormal"><span style="COLOR: red"><span>&nbsp; </span>}</span></p>
<p class="MsoNormal"><span style="COLOR: red">}}'</span><span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT </span>dbo<span style="COLOR: gray">.</span>ToJSON<span style="COLOR: gray">(</span>@MyHierarchy<span style="COLOR: gray">)</span></p></div>
<p>To get:</p>
<div class="listing"><span style="FONT-SIZE: 8pt">{</span> 
<p class="MsoNormal"><span style="FONT-SIZE: 8pt">"menu" :<span>&nbsp;&nbsp; </span>{</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp; </span>"id" : "file",</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp; </span>"value" : "File",</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp; </span>"popup" :<span>&nbsp;&nbsp; </span>{</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp; </span>"menuitem" :<span>&nbsp;&nbsp; </span>[</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"value" : "New",</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"onclick" : "CreateNewDoc()"</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>},</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"value" : "Open",</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"onclick" : "OpenDoc()"</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>},</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"value" : "Close",</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>"onclick" : "CloseDoc()"</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>]</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp;&nbsp;&nbsp; </span>}</span></p>
<p class="MsoNormal"><span style="FONT-SIZE: 8pt"><span>&nbsp; </span>}</span></p>
<p class="MsoNormal"><span style="LINE-HEIGHT: 115%; FONT-SIZE: 8pt">}</span><span lang="EN-US"></span></p></div>
<h1>Background</h1>
<p>TSQL isn’t really designed for doing complex string parsing, 
particularly where strings represent nested data structures such as XML,
 JSON, YAML, or XHTML.</p>
<p>You can do it but it is not a pretty sight; but why would you ever 
want to do it anyway? Surely, if anything was meant for the 'application
 layer' in C# or VB.net, then this is it. 'Oh yes', will chime in the 
application thought police, 'this is far better done in the application 
or with a CLR.' Not necessarily.</p>
<p>Sometimes, you just need to do something inappropriate in TSQL.</p>
<p>There are a whole lot of reasons why this might happen to you. It 
could be that your DBA doesn’t allow a CLR, for example, or you lack the
 necessary skills with procedural code. Sometimes, there isn't any 
application, or you want to run code unobtrusively across databases or 
servers.</p>
<p>I needed to interpret or 'shred' JSON data. JSON is one of the most 
popular lightweight markup languages, and is probably the best choice 
for transfer of object data from a web page. It is, in fact, executable 
JavaScript that is very quick to code in the browser in order to dump 
the contents of a JavaScript object, and is lightning-fast to populate 
the browser object from the database since you are passing it executable
 code (you need to parse it first for security reasons - passing 
executable code around is potentially very risky). AJAX can use JSON 
rather than XML so you have an opportunity to have a much simpler route 
for data between database and browser, with less opportunity for error.</p>
<p>The conventional way of dealing with data like this is to let a 
separate business layer parse a JSON 'document' into some tree structure
 and then update the database by making a series of calls to it. This is
 fine, but can get more complicated if you need to ensure that the 
updates to the database are wrapped into one transaction so that if 
anything goes wrong, then the whole operation can be rolled back. This 
is why a CLR or TSQL approach has advantages.</p>
<p class="quote">"Sometimes, you just <br>need to do something <br>inappropriate in TSQL..."</p>
<p>I wrote the parser as a prototype because it was the quickest way to 
determine what was involved in the process, so I could then re-write 
something as a CLR in a .NET language.&nbsp; It takes a JSON string and 
produces a result in the form of an adjacency list representation of 
that hierarchy. In the end, the code did what I wanted with adequate 
performance (It reads a json file of &nbsp;540 name\value pairs and 
creates the SQL &nbsp;hierarchy table &nbsp;in 4 seconds) so I didn't 
bother with the added complexity of maintaining a CLR routine. In order 
to test more thoroughly what I'd done, I wrote a JSON generator that 
used the same Adjacency list, so you can now import and export data via 
JSON!</p>
<p>These markup languages such as JSON and XML all represent object data
 as hierarchies. Although it looks very different to the 
entity-relational model, it isn't. It is rather more a different 
perspective on the same model. The first trick is to represent it as a 
Adjacency list hierarchy in a table, and then use the contents of this 
table to update the database. This Adjacency list is really the Database
 equivalent of any of the nested data structures that are used for the 
interchange of serialized information with the application, and can be 
used to create XML, OSX Property lists, Python nested structures or YAML
 as easily as JSON.</p>
<p>Adjacency list tables have the same structure whatever the data in 
them. This means that you can define a single Table-Valued&nbsp; Type 
and pass data structures around between stored procedures. However, they
 are best held at arms-length from the data, since they are not 
relational tables, but something more like the dreaded EAV 
(Entity-Attribute-Value) tables. Converting the data from its 
Hierarchical table form will be different for each application, but is 
easy with a CTE. You can, alternatively, convert the hierarchical table 
into XML and interrogate that with XQuery.</p>
<h1>JSON format.</h1>
<p>JSON is designed to be as lightweight as possible and so it has only 
two structures. The first, delimited by curly brackets, is a collection 
of name/value pairs, separated by commas. The name is followed by a 
colon. This structure is generally implemented in the application-level 
as an <i>object</i>, record, struct, dictionary, hash table, keyed list,
 or associative array. The other structure is an ordered list of values,
 separated by commas. This is usually manifested as an <i>array</i>, vector, list, or sequence.</p>
<p class="quote" align="left">"Using recursion in TSQL is <br>like Sumo Wrestlers doing Ballet. <br>It is possible but not pretty."</p>
<p>The first snag for TSQL is that the curly or square brackets are not 
'escaped' within a string, so that there is no way of shredding a JSON 
'document' simply. It is difficult to&nbsp; differentiate a bracket used
 as the delimiter of an array or structure, and one that is within a 
string. Also, interpreting a string into a SQL String isn't entirely 
straightforward since hex codes can be embedded anywhere to represent 
complex Unicode characters, and all the old C-style escaped characters 
are used. The second complication is that, unlike YAML, the datatypes of
 values can't be explicitly declared. You have to sniff them out from 
applying the rules from the <a href="http://www.ietf.org/rfc/rfc4627.txt?number=4627" target="_blank">JSON Specification</a>.</p>
<p>Obviously, structures can be embedded in structures, so recursion is a
 natural way of making life easy. Using recursion in TSQL is like Sumo 
Wrestlers doing Ballet. It is possible but not pretty.</p>
<h1>The implementation</h1>
<p>Although the code for the JSON Parser/Shredder will run in SQL Server
 2005, and even in SQL Server 2000 (with some modifications required), I
 couldn't resist using a TVP (Table Valued Parameter) to pass a 
hierarchical table to the function, <b>ToJSON,</b> that produces a JSON 'document'. Writing a SQL Server 2005 version should not be too hard.</p>
<p>First the function replaces all strings with tokens of the form <strong>@Stringxx</strong>, where <strong>xx</strong>
 is the foreign key of the table variable where the strings are held. 
This takes them, and their potentially difficult embedded brackets, out 
of the way. Names are&nbsp; always strings in JSON as well as&nbsp; 
string values.</p>
<p>Then, the routine iteratively finds the next structure that has no 
structure contained within it, (and is, by definition the leaf 
structure), and parses it, replacing it with an object token of the form
 '<strong>@Objectxxx</strong>', or '<strong>@arrayxxx</strong>', where <strong>xxx</strong>
 is the object id assigned to it. The values, or name/value pairs are 
retrieved from the string table and stored in the hierarchy table. 
Gradually, the JSON document is eaten until there is just a single root 
object left.</p>
<p>The JSON outputter is a great deal simpler, since one can be surer of
 the input, but essentially it does the reverse process, working from 
the root to the leaves. The only complication is working out the indent 
of the formatted output string.</p>
<p>In the implementation, you'll see a fairly heavy use of PATINDEX. 
This uses a poor man's RegEx, a starving man's RegEx. However, it is all
 we have, and can be pressed into service by chopping the string it is 
searching (if only it had an optional third parameter like CHARINDEX 
that specified the index of the start position of the search!). The 
STUFF function is also a godsend for this sort of string-manipulation 
work.</p>
<div class="listing">
<p><span style="COLOR: blue">IF</span><span> <span style="COLOR: fuchsia">OBJECT_ID</span><span style="COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: red">N'dbo.parseJSON'</span><span style="COLOR: gray">)</span> <span style="COLOR: gray">IS</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">NULL<!--?xml:namespace prefix = o /--><o:p></o:p></span></span></p>
<p><span><span>&nbsp; </span><span style="COLOR: blue">DROP</span> <span style="COLOR: blue">FUNCTION</span> dbo<span style="COLOR: gray">.</span>parseJSON<o:p></o:p></span></p>
<p><span style="COLOR: blue">GO<o:p></o:p></span></p>
<p><span style="COLOR: blue">CREATE</span><span> <span style="COLOR: blue">FUNCTION</span> dbo<span style="COLOR: gray">.</span>parseJSON<span style="COLOR: gray">(</span> @JSON <span style="COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">))<o:p></o:p></span></span></p>
<p><span style="COLOR: blue">RETURNS</span><span> @hierarchy <span style="COLOR: blue">table<o:p></o:p></span></span></p>
<p><span style="COLOR: gray">(<o:p></o:p></span></p>
<p><span><span>&nbsp; </span>element_id <span style="COLOR: blue">int</span> <span style="COLOR: blue">IDENTITY</span><span style="COLOR: gray">(</span>1<span style="COLOR: gray">,</span> 1<span style="COLOR: gray">)</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">NULL,</span> <span style="COLOR: green">/* internal surrogate primary key gives the order of parsing and the list order */<o:p></o:p></span></span></p>
<p><span><span>&nbsp; </span>parent_id <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span> <span style="COLOR: green">/*
 if the element has a parent then it is in this column. The document is 
the ultimate parent, so you can get the structure from recursing from 
the document */<o:p></o:p></span></span></p>
<p><span><span>&nbsp; </span><span style="COLOR: fuchsia">object_id</span> <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span> <span style="COLOR: green">/* each list or object has an object id. This ties all elements to a parent. Lists are treated as objects here */<o:p></o:p></span></span></p>
<p><span><span>&nbsp; </span>name <span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span>2000<span style="COLOR: gray">),</span> <span style="COLOR: green">/* the name of the object */<o:p></o:p></span></span></p>
<p><span><span>&nbsp; </span>stringvalue <span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span>4000<span style="COLOR: gray">)</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">NULL,</span> <span style="COLOR: green">/*the string representation of the value of the element. */<o:p></o:p></span></span></p>
<p><span><span>&nbsp; </span>valuetype <span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span>100<span style="COLOR: gray">)</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">null</span> <span style="COLOR: green">/* the declared type of the value represented as a string in stringvalue*/<o:p></o:p></span></span></p>
<p><span style="COLOR: gray">)<o:p></o:p></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span style="COLOR: blue">AS<o:p></o:p></span></p>
<p><span style="COLOR: blue"><o:p>&nbsp;</o:p></span></p>
<p><span style="COLOR: blue">BEGIN<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: blue">DECLARE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@firstobject <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span> <span style="COLOR: green">--the index of the first open bracket found in the JSON string<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@opendelimiter <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span><span style="COLOR: green">--the index of the next open bracket found in the JSON string<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@nextopendelimiter <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span><span style="COLOR: green">--the index of subsequent open bracket found in the JSON string<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@nextclosedelimiter <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span><span style="COLOR: green">--the index of subsequent close bracket found in the JSON string<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@type <span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">),</span><span style="COLOR: green">--whether it denotes an object or an array<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@nextclosedelimiterChar <span style="COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>1<span style="COLOR: gray">),</span><span style="COLOR: green">--either a '}' or a ']'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@contents <span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">),</span> <span style="COLOR: green">--the unparsed contents of the bracketed expression<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@start <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span> <span style="COLOR: green">--index of the start of the token that you are parsing<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@end <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span><span style="COLOR: green">--index of the end of the token that you are parsing<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@param <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span><span style="COLOR: green">--the parameter at the end of the next Object/Array token<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@endofname <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span><span style="COLOR: green">--the index of the start of the parameter at end of Object/Array token<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@token <span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span>4000<span style="COLOR: gray">),</span><span style="COLOR: green">--either a string or object<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@value <span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">),</span> <span style="COLOR: green">-- the value as a string<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@name <span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span>200<span style="COLOR: gray">),</span> <span style="COLOR: green">--the name as a string<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@parent_id <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span><span style="COLOR: green">--the next parent ID to allocate<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@lenjson <span style="COLOR: blue">int</span><span style="COLOR: gray">,</span><span style="COLOR: green">--the current length of the JSON String<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@characters <span style="COLOR: blue">NCHAR</span><span style="COLOR: gray">(</span>62<span style="COLOR: gray">),</span><span style="COLOR: green">--used to convert hex to decimal<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@result <span style="COLOR: blue">BIGINT</span><span style="COLOR: gray">,</span><span style="COLOR: green">--the value of the hex symbol being parsed<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@index <span style="COLOR: blue">SMALLINT</span><span style="COLOR: gray">,</span><span style="COLOR: green">--used for parsing the hex value<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@escape <span style="COLOR: blue">int</span> <span style="COLOR: green">--the index of the next escape character<o:p></o:p></span></span></p>
<p><span style="COLOR: green"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: green">/* in this temporary table we keep all strings, even the names of the elements, since they are 'escaped' <o:p></o:p></span></span></p>
<p><span style="COLOR: green"><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span>&nbsp;</span>* in a different way, and may contain, unescaped, brackets denoting objects or lists. These are replaced in <o:p></o:p></span></p>
<p><span style="COLOR: green"><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span>&nbsp;</span>* the JSON string by tokens representing the string <o:p></o:p></span></p>
<p><span style="COLOR: green"><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span>&nbsp;</span>*/<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: blue">DECLARE</span> @strings <span style="COLOR: blue">table</span> <o:p></o:p></span></p>
<p><span style="COLOR: blue"><span style="mso-tab-count: 1">&nbsp;&nbsp; </span></span><span style="FONT-FAMILY: Consolas; COLOR: gray">(<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>string_id <span style="COLOR: blue">int</span> <span style="COLOR: blue">IDENTITY</span><span style="COLOR: gray">(</span>1<span style="COLOR: gray">,</span> 1<span style="COLOR: gray">),<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>stringvalue <span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: green">/* initialise the characters to convert hex to ascii */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@characters <span style="COLOR: gray">=</span> <span style="COLOR: red">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><span style="COLOR: gray">,</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span>@parent_id <span style="COLOR: gray">=</span> 0<span style="COLOR: gray">;<o:p></o:p></span></span></p>
<p><span><span>&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: green">/*
 firstly we process all strings. This is done because [{} and ] aren't 
escaped in strings, which complicates an iterative parse. */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: blue">WHILE</span> 1 <span style="COLOR: gray">=</span> 1 <span style="COLOR: green">/* forever until there is nothing more to do */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @start <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[^a-zA-Z]["]%'</span><span style="COLOR: gray">,</span> @json <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">);</span> <span style="COLOR: green">/* next delimited string */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @start <span style="COLOR: gray">=</span> 0 <span style="COLOR: blue">BREAK</span> <span style="COLOR: green">/*no more so drop through the WHILE loop */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@json<span style="COLOR: gray">,</span> @start<span style="COLOR: gray">+</span>1<span style="COLOR: gray">,</span> 1<span style="COLOR: gray">)</span> <span style="COLOR: gray">=</span> <span style="COLOR: red">'"'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN</span><span>&nbsp; </span><span style="COLOR: green">/* Delimited name */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SET</span> @start <span style="COLOR: gray">=</span> @start<span style="COLOR: gray">+</span>1<span style="COLOR: gray">;<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SET</span> @end <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[^\]["]%'</span><span style="COLOR: gray">,</span> <span style="COLOR: gray">RIGHT(</span>@json<span style="COLOR: gray">,</span> <span style="COLOR: fuchsia">LEN</span><span style="COLOR: gray">(</span>@json<span style="COLOR: gray">+</span><span style="COLOR: red">'|'</span><span style="COLOR: gray">)-</span>@start<span style="COLOR: gray">)</span> <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">);<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">END<o:p></o:p></span></span></p>
<p><span style="COLOR: blue"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @end <span style="COLOR: gray">=</span> 0 <span style="COLOR: green">/*no end delimiter to last string*/<o:p></o:p></span></span></p>
<p><span style="COLOR: green"><o:p>&nbsp;</o:p></span><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BREAK</span> <span style="COLOR: green">/* no more */<o:p></o:p></span></span></p>
<p><span style="COLOR: green"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @token <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@json<span style="COLOR: gray">,</span> @start<span style="COLOR: gray">+</span>1<span style="COLOR: gray">,</span> @end<span style="COLOR: gray">-</span>1<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* now put in the escaped control characters */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @token <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">REPLACE</span><span style="COLOR: gray">(</span>@token<span style="COLOR: gray">,</span> from_string<span style="COLOR: gray">,</span> to_string<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">FROM<o:p></o:p></span></span></p>
<p><span style="COLOR: blue"><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style="COLOR: gray">(<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <span style="COLOR: red">'\"'</span> <span style="COLOR: blue">AS</span> from_string<span style="COLOR: gray">,</span> <span style="COLOR: red">'"'</span> <span style="COLOR: blue">AS</span> to_string<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <span style="COLOR: red">'\\'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'\'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <span style="COLOR: red">'\/'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'/'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <span style="COLOR: red">'\b'</span><span style="COLOR: gray">,</span> <span style="COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>08<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <span style="COLOR: red">'\f'</span><span style="COLOR: gray">,</span> <span style="COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>12<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <span style="COLOR: red">'\n'</span><span style="COLOR: gray">,</span> <span style="COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <span style="COLOR: red">'\r'</span><span style="COLOR: gray">,</span> <span style="COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>13<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <span style="COLOR: red">'\t'</span><span style="COLOR: gray">,</span> <span style="COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>09<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">)</span> substitutions<o:p></o:p></span></p>
<p><span><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @result <span style="COLOR: gray">=</span> 0<span style="COLOR: gray">,</span> @escape <span style="COLOR: gray">=</span> 1<o:p></o:p></span></p>
<p><span><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/*Begin to take out any hex escape codes*/<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHILE</span> @escape <span style="COLOR: gray">&gt;</span> 0<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* find the next hex escape sequence */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@index <span style="COLOR: gray">=</span> 0<span style="COLOR: gray">,</span><span style="mso-tab-count: 1">&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@escape <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%\x[0-9a-f][0-9a-f][0-9a-f][0-9a-f]%'</span><span style="COLOR: gray">,</span> @token <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @escape <span style="COLOR: gray">&gt;</span> 0 <span style="COLOR: green">/* if there is one */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHILE</span> @index <span style="COLOR: gray">&lt;</span> 4 <span style="COLOR: green">/* there are always four digits to a \x sequence<span>&nbsp; </span>*/<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* determine its value */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@result <span style="COLOR: gray">=</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@result <span style="COLOR: gray">+</span> <span style="COLOR: fuchsia">POWER</span><span style="COLOR: gray">(</span>16<span style="COLOR: gray">,</span> @index<span style="COLOR: gray">)</span> <span style="COLOR: gray">*</span><span style="COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">CHARINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@token<span style="COLOR: gray">,</span> @escape <span style="COLOR: gray">+</span> 2 <span style="COLOR: gray">+</span> 3 <span style="COLOR: gray">-</span> @index<span style="COLOR: gray">,</span> 1<span style="COLOR: gray">),</span> @characters<span style="COLOR: gray">)</span> <span style="COLOR: gray">-</span> 1<span style="COLOR: gray">),</span> @index <span style="COLOR: gray">=</span> @index<span style="COLOR: gray">+</span>1 <span style="COLOR: gray">;<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">END<o:p></o:p></span></span></p>
<p><span style="COLOR: blue"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* and replace the hex sequence by its unicode value */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @token <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">STUFF</span><span style="COLOR: gray">(</span>@token<span style="COLOR: gray">,</span> @escape<span style="COLOR: gray">,</span> 6<span style="COLOR: gray">,</span> <span style="COLOR: blue">NCHAR</span><span style="COLOR: gray">(</span>@result<span style="COLOR: gray">))<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">END<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">END<o:p></o:p></span></span></p>
<p><span style="COLOR: blue"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* now store the string away */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">INSERT</span> <span style="COLOR: blue">INTO</span> @strings <o:p></o:p></span></p>
<p><span style="COLOR: blue"><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style="COLOR: gray">(</span><span>stringvalue<span style="COLOR: gray">)</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @token<o:p></o:p></span></p>
<p><span><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* and replace the string with a token */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @json <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">STUFF</span><span style="COLOR: gray">(</span>@json<span style="COLOR: gray">,</span> @start<span style="COLOR: gray">,</span> @end <span style="COLOR: gray">+</span> 1<span style="COLOR: gray">,</span> <span style="COLOR: red">'@string'</span> <span style="COLOR: gray">+</span> <span style="COLOR: fuchsia">CONVERT</span><span style="COLOR: gray">(</span><span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span>5<span style="COLOR: gray">),</span> <span style="COLOR: fuchsia">@@identity</span><span style="COLOR: gray">))<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">END<o:p></o:p></span></span></p>
<p><span style="COLOR: blue"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* all strings are now removed. Now we find the first leaf. */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHILE</span> 1 <span style="COLOR: gray">=</span> 1<span>&nbsp; </span><span style="COLOR: green">/* forever until there is nothing more to do */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @parent_id <span style="COLOR: gray">=</span> @parent_id <span style="COLOR: gray">+</span> 1<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* find the first object or list by looking for the open bracket */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @firstobject <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[{[[]%'</span><span style="COLOR: gray">,</span> @json <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">)</span><span>&nbsp; </span><span style="COLOR: green">/*object or array*/<o:p></o:p></span></span></p>
<p><span style="COLOR: green"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @firstobject <span style="COLOR: gray">=</span> 0 <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BREAK<o:p></o:p></span></span></p>
<p><span style="COLOR: blue"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF </span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@json<span style="COLOR: gray">,</span> @firstobject<span style="COLOR: gray">,</span> 1<span style="COLOR: gray">)</span> <span style="COLOR: gray">=</span> <span style="COLOR: red">'{'</span><span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @nextclosedelimiterChar <span style="COLOR: gray">=</span> <span style="COLOR: red">'}'</span><span style="COLOR: gray">,</span> @type <span style="COLOR: gray">=</span> <span style="COLOR: red">'object'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @nextclosedelimiterChar <span style="COLOR: gray">=</span> <span style="COLOR: red">']'</span><span style="COLOR: gray">,</span> @type <span style="COLOR: gray">=</span> <span style="COLOR: red">'array'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @opendelimiter <span style="COLOR: gray">=</span> @firstobject<o:p></o:p></span></p>
<p><span><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHILE</span> 1 <span style="COLOR: gray">=</span> 1 <span style="COLOR: green">--find the innermost object or list...<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @lenjson <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">LEN</span><span style="COLOR: gray">(</span>@json<span style="COLOR: gray">+</span><span style="COLOR: red">'|'</span><span style="COLOR: gray">)-</span>1<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* find the matching close-delimiter proceeding after the open-delimiter */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @nextclosedelimiter <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">CHARINDEX</span><span style="COLOR: gray">(</span>@nextclosedelimiterChar<span style="COLOR: gray">,</span> @json<span style="COLOR: gray">,</span> @opendelimiter <span style="COLOR: gray">+</span> 1<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* is there an intervening open-delimiter of either type */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @nextopendelimiter <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[{[[]%'</span><span style="COLOR: gray">,RIGHT(</span>@json<span style="COLOR: gray">,</span> @lenjson<span style="COLOR: gray">-</span>@opendelimiter<span style="COLOR: gray">)</span> <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">)</span> <span style="COLOR: green">/*object*/<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @nextopendelimiter <span style="COLOR: gray">=</span> 0<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BREAK<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @nextopendelimiter <span style="COLOR: gray">=</span> @nextopendelimiter <span style="COLOR: gray">+</span> @opendelimiter<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @nextclosedelimiter <span style="COLOR: gray">&lt;</span> @nextopendelimiter<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BREAK<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@json<span style="COLOR: gray">,</span> @nextopendelimiter<span style="COLOR: gray">,</span> 1<span style="COLOR: gray">)</span> <span style="COLOR: gray">=</span> <span style="COLOR: red">'{'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @nextclosedelimiterChar <span style="COLOR: gray">=</span> <span style="COLOR: red">'}'</span><span style="COLOR: gray">,</span> @type <span style="COLOR: gray">=</span> <span style="COLOR: red">'object'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @nextclosedelimiterChar <span style="COLOR: gray">=</span> <span style="COLOR: red">']'</span><span style="COLOR: gray">,</span> @type <span style="COLOR: gray">=</span> <span style="COLOR: red">'array'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @opendelimiter <span style="COLOR: gray">=</span> @nextopendelimiter<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">END<o:p></o:p></span></span></p>
<p><span><span>&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* and parse out the list or name/value pairs */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @contents <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@json<span style="COLOR: gray">,</span> @opendelimiter<span style="COLOR: gray">+</span>1<span style="COLOR: gray">,</span> @nextclosedelimiter<span style="COLOR: gray">-</span>@opendelimiter <span style="COLOR: gray">-</span> 1<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @json <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">STUFF</span><span style="COLOR: gray">(</span>@json<span style="COLOR: gray">,</span> @opendelimiter<span style="COLOR: gray">,</span> @nextclosedelimiter <span style="COLOR: gray">-</span> @opendelimiter <span style="COLOR: gray">+</span> 1<span style="COLOR: gray">,</span> <span style="COLOR: red">'@'</span> <span style="COLOR: gray">+</span> @type <span style="COLOR: gray">+</span> <span style="COLOR: fuchsia">CONVERT</span><span style="COLOR: gray">(</span><span style="COLOR: blue">nvarchar</span><span style="COLOR: gray">(</span>5<span style="COLOR: gray">),</span> @parent_id<span style="COLOR: gray">))<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHILE </span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[A-Za-z0-9@+.e]%'</span><span style="COLOR: gray">,</span> @contents <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">))</span> <span style="COLOR: gray">&lt;</span><span>&nbsp; </span><span style="COLOR: gray">&gt;</span> 0<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN</span> <span style="COLOR: green">/* WHILE PATINDEX */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @type <span style="COLOR: gray">=</span> <span style="COLOR: red">'object'</span> <span style="COLOR: green">/*it will be a 0-n list containing a string followed by a string, number,boolean, or null*/<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @end <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">CHARINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">':'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">' '</span><span style="COLOR: gray">+</span>@contents<span style="COLOR: gray">)</span> <span style="COLOR: green">/*if there is anything, it will be a string-based name.*/<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @start <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[^A-Za-z@][@]%'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">' '</span><span style="COLOR: gray">+</span>@contents <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">)</span> <span style="COLOR: green">/*AAAAAAAA*/<o:p></o:p></span></span></p>
<p><span style="COLOR: green"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@token <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span><span style="COLOR: red">' '</span><span style="COLOR: gray">+</span>@contents<span style="COLOR: gray">,</span> @start <span style="COLOR: gray">+</span> 1<span style="COLOR: gray">,</span> @end <span style="COLOR: gray">-</span> @start <span style="COLOR: gray">-</span> 1<span style="COLOR: gray">),</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@endofname <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[0-9]%'</span><span style="COLOR: gray">,</span> @token <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">),<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@param <span style="COLOR: gray">=</span> <span style="COLOR: gray">RIGHT(</span>@token<span style="COLOR: gray">,</span> <span style="COLOR: fuchsia">LEN</span><span style="COLOR: gray">(</span>@token<span style="COLOR: gray">)-</span>@endofname<span style="COLOR: gray">+</span>1<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@token <span style="COLOR: gray">=</span> <span style="COLOR: gray">LEFT(</span>@token<span style="COLOR: gray">,</span> @endofname <span style="COLOR: gray">-</span> 1<span style="COLOR: gray">),<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@contents <span style="COLOR: gray">=</span> <span style="COLOR: gray">RIGHT(</span><span style="COLOR: red">' '</span> <span style="COLOR: gray">+</span> @contents<span style="COLOR: gray">,</span> <span style="COLOR: fuchsia">LEN</span><span style="COLOR: gray">(</span><span style="COLOR: red">' '</span> <span style="COLOR: gray">+</span> @contents <span style="COLOR: gray">+</span> <span style="COLOR: red">'|'</span><span style="COLOR: gray">)</span> <span style="COLOR: gray">-</span> @end <span style="COLOR: gray">-</span> 1<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @name <span style="COLOR: gray">=</span> stringvalue <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">FROM</span> @strings<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHERE</span> string_id <span style="COLOR: gray">=</span> @param <span style="COLOR: green">/*fetch the name*/<o:p></o:p></span></span></p>
<p><span style="COLOR: green"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">END<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">BEGIN<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @name <span style="COLOR: gray">=</span> <span style="COLOR: gray">null</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">END<o:p></o:p></span></span></p>
<p><span style="COLOR: blue"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @end <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">CHARINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">','</span><span style="COLOR: gray">,</span> @contents<span style="COLOR: gray">)</span><span>&nbsp; </span><span style="COLOR: green">/*a string-token, object-token, list-token, number,boolean, or null*/<o:p></o:p></span></span></p>
<p><span style="COLOR: green"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @end <span style="COLOR: gray">=</span> 0<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @end <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[A-Za-z0-9@+.e][^A-Za-z0-9@+.e]%'</span><span style="COLOR: gray">,</span> @contents<span style="COLOR: gray">+</span><span style="COLOR: red">' '</span> <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">)</span> <span style="COLOR: gray">+</span> 1<o:p></o:p></span></p>
<p><span><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @start <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[^A-Za-z0-9@+.e][A-Za-z0-9@+.e]%'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">' '</span> <span style="COLOR: gray">+</span> @contents <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/*select @start,@end, LEN(@contents+'|'), @contents */<o:p></o:p></span></span></p>
<p><span style="COLOR: green"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@value <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">RTRIM</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@contents<span style="COLOR: gray">,</span> @start<span style="COLOR: gray">,</span> @end<span style="COLOR: gray">-</span>@start<span style="COLOR: gray">)),<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@contents <span style="COLOR: gray">=</span> <span style="COLOR: gray">RIGHT(</span>@contents <span style="COLOR: gray">+</span> <span style="COLOR: red">' '</span><span style="COLOR: gray">,</span> <span style="COLOR: fuchsia">LEN</span><span style="COLOR: gray">(</span>@contents<span style="COLOR: gray">+</span><span style="COLOR: red">'|'</span><span style="COLOR: gray">)</span> <span style="COLOR: gray">-</span> @end<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@value<span style="COLOR: gray">,</span> 1<span style="COLOR: gray">,</span> 7<span style="COLOR: gray">)</span> <span style="COLOR: gray">=</span> <span style="COLOR: red">'@object'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">INSERT</span> <span style="COLOR: blue">INTO</span> @hierarchy<span style="COLOR: blue"> </span><span style="COLOR: gray">(</span>name<span style="COLOR: gray">,</span> parent_id<span style="COLOR: gray">,</span> stringvalue<span style="COLOR: gray">,</span> <span style="COLOR: fuchsia">object_id</span><span style="COLOR: gray">,</span> valuetype<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @name<span style="COLOR: gray">,</span> @parent_id<span style="COLOR: gray">,</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@value<span style="COLOR: gray">,</span> 8<span style="COLOR: gray">,</span> 5<span style="COLOR: gray">),<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@value<span style="COLOR: gray">,</span> 8<span style="COLOR: gray">,</span> 5<span style="COLOR: gray">),</span> <span style="COLOR: red">'object'<o:p></o:p></span></span></p>
<p><span style="COLOR: red"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@value<span style="COLOR: gray">,</span> 1<span style="COLOR: gray">,</span> 6<span style="COLOR: gray">)</span> <span style="COLOR: gray">=</span> <span style="COLOR: red">'@array'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">INSERT</span> <span style="COLOR: blue">INTO</span> @hierarchy<span style="COLOR: blue"> </span><span style="COLOR: gray">(</span>name<span style="COLOR: gray">,</span> parent_id<span style="COLOR: gray">,</span> stringvalue<span style="COLOR: gray">,</span> <span style="COLOR: fuchsia">object_id</span><span style="COLOR: gray">,</span> valuetype<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @name<span style="COLOR: gray">,</span> @parent_id<span style="COLOR: gray">,</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@value<span style="COLOR: gray">,</span> 7<span style="COLOR: gray">,</span> 5<span style="COLOR: gray">),</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@value<span style="COLOR: gray">,</span> 7<span style="COLOR: gray">,</span> 5<span style="COLOR: gray">),</span> <span style="COLOR: red">'array'<o:p></o:p></span></span></p>
<p><span style="COLOR: red"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@value<span style="COLOR: gray">,</span> 1<span style="COLOR: gray">,</span> 7<span style="COLOR: gray">)</span> <span style="COLOR: gray">=</span> <span style="COLOR: red">'@string'</span> <o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">INSERT</span> <span style="COLOR: blue">INTO</span> @hierarchy<span style="COLOR: blue"> </span><span style="COLOR: gray">(</span>name<span style="COLOR: gray">,</span> parent_id<span style="COLOR: gray">,</span> stringvalue<span style="COLOR: gray">,</span> valuetype<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @name<span style="COLOR: gray">,</span> @parent_id<span style="COLOR: gray">,</span> stringvalue<span style="COLOR: gray">,</span> <span style="COLOR: red">'string'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">FROM</span> @strings<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHERE</span> string_id <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@value<span style="COLOR: gray">,</span> 8<span style="COLOR: gray">,</span> 5<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @value <span style="COLOR: gray">IN</span><span style="COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: red">'true'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'false'</span><span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span>&nbsp; </span><span style="COLOR: blue">INSERT</span> <span style="COLOR: blue">INTO</span> @hierarchy<span style="COLOR: blue"> </span><span style="COLOR: gray">(</span>name<span style="COLOR: gray">,</span> parent_id<span style="COLOR: gray">,</span> stringvalue<span style="COLOR: gray">,</span> valuetype<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @name<span style="COLOR: gray">,</span> @parent_id<span style="COLOR: gray">,</span> @value<span style="COLOR: gray">,</span> <span style="COLOR: red">'boolean'<o:p></o:p></span></span></p>
<p><span style="COLOR: red"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 6">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @value <span style="COLOR: gray">=</span> <span style="COLOR: red">'null'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">INSERT</span> <span style="COLOR: blue">INTO</span> @hierarchy<span style="COLOR: blue"> </span><span style="COLOR: gray">(</span>name<span style="COLOR: gray">,</span> parent_id<span style="COLOR: gray">,</span> stringvalue<span style="COLOR: gray">,</span> valuetype<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @name<span style="COLOR: gray">,</span> @parent_id<span style="COLOR: gray">,</span> @value<span style="COLOR: gray">,</span> <span style="COLOR: red">'null'<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 7">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 8">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[^0-9]%'</span><span style="COLOR: gray">,</span> @value <span style="COLOR: blue">collate</span> SQL_Latin1_General_CP850_Bin<span style="COLOR: gray">)</span> <span style="COLOR: gray">&gt;</span> 0<o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">INSERT</span> <span style="COLOR: blue">INTO</span> @hierarchy<span style="COLOR: blue"> </span><span style="COLOR: gray">(</span>name<span style="COLOR: gray">,</span> parent_id<span style="COLOR: gray">,</span> stringvalue<span style="COLOR: gray">,</span> valuetype<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @name<span style="COLOR: gray">,</span> @parent_id<span style="COLOR: gray">,</span> @value<span style="COLOR: gray">,</span> <span style="COLOR: red">'real'<o:p></o:p></span></span></p>
<p><span style="COLOR: red"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 8">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">INSERT</span> <span style="COLOR: blue">INTO</span> @hierarchy<span style="COLOR: blue"> </span><span style="COLOR: gray">(</span>name<span style="COLOR: gray">,</span> parent_id<span style="COLOR: gray">,</span> stringvalue<span style="COLOR: gray">,</span> valuetype<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span style="COLOR: gray"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @name<span style="COLOR: gray">,</span> @parent_id<span style="COLOR: gray">,</span> @value<span style="COLOR: gray">,</span> <span style="COLOR: red">'int'</span><span style="mso-tab-count: 1">&nbsp; </span><span style="mso-tab-count: 3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>
<p><span><span style="mso-tab-count: 2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">END</span> <span style="COLOR: green">/* WHILE PATINDEX */<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: blue">END</span> <span style="COLOR: green">/* WHILE 1=1 forever until there is nothing more to do */<o:p></o:p></span></span></p>
<p><span style="COLOR: green"><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: blue">INSERT</span> <span style="COLOR: blue">INTO</span> @hierarchy<span style="COLOR: blue"> </span><span style="COLOR: gray">(</span>name<span style="COLOR: gray">,</span> parent_id<span style="COLOR: gray">,</span> stringvalue<span style="COLOR: gray">,</span> <span style="COLOR: fuchsia">object_id</span><span style="COLOR: gray">,</span> valuetype<span style="COLOR: gray">)<o:p></o:p></span></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> <span style="COLOR: red">'-'</span><span style="COLOR: gray">,</span> <span style="COLOR: gray">NULL,</span> <span style="COLOR: red">''</span><span style="COLOR: gray">,</span> @parent_id <span style="COLOR: gray">-</span> 1<span style="COLOR: gray">,</span> @type<o:p></o:p></span></p>
<p><span><o:p>&nbsp;</o:p></span></p>
<p><span><span style="mso-tab-count: 1">&nbsp;&nbsp; </span><span style="COLOR: blue">RETURN<o:p></o:p></span></span></p>
<p><span style="COLOR: blue"><o:p>&nbsp;</o:p></span></p>
<p><span style="COLOR: blue">END<o:p></o:p></span></p>
<p><span style="COLOR: blue"><o:p>&nbsp;</o:p></span></p>
<p><span style="COLOR: blue">GO<o:p></o:p></span></p></div>
<p>So once we have a hierarchy, we can pass it to a stored procedure. As
 the output is an adjacency list, it should be easy to access the data. 
You might find it handy to create a table type if you are using SQL 
Server 2008. Here is what I use. (Note that if you drop a Table Valued 
Parameter type, you will have to drop any dependent functions or 
procedures first, and re-create them afterwards).</p>
<div class="listing"><span style="COLOR: green">-- Create the data type</span> 
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">IF</span> <span style="COLOR: gray">EXISTS</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span> <span style="COLOR: gray">*</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">FROM</span> <span style="COLOR: green">sys</span><span style="COLOR: gray">.</span><span style="COLOR: green">types</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">WHERE</span> name <span style="COLOR: gray">LIKE</span> <span style="COLOR: red">'JSONHierarchy'</span><span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">DROP</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">TYPE</span> dbo<span style="COLOR: gray">.</span>JSONHierarchy</p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">go</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CREATE</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">TYPE</span> dbo<span style="COLOR: gray">.</span>JSONHierarchy <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">AS</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">TABLE</span></p>
<p class="MsoNormal"><span style="COLOR: gray">(</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp; </span>element_id <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">INT</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">NULL,</span> <span style="COLOR: green">/* internal surrogate primary key gives the order of parsing and the list order */</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp; </span>parent_ID <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">INT</span><span style="COLOR: gray">,</span><span style="COLOR: green">/*
 if the element has a parent then it is in this column. The document is 
the ultimate parent, so you can get the structure from recursing from 
the document */</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp; </span><span style="COLOR: fuchsia">Object_ID</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">INT</span><span style="COLOR: gray">,</span><span style="COLOR: green">/* each list or object has an object id. This ties all elements to a parent. Lists are treated as objects here */</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp; </span>NAME <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span>2000<span style="COLOR: gray">),</span><span style="COLOR: green">/* the name of the object, null if it hasn't got one */</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp; </span>StringValue <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">)</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">NULL,</span><span style="COLOR: green">/*the string representation of the value of the element. */</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp; </span>ValueType <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">VARCHAR</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">)</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">null</span> <span style="COLOR: green">/* the declared type of the value represented as a string in StringValue*/</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">PRIMARY</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">KEY </span><span style="COLOR: gray">(</span>element_id<span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span style="COLOR: gray">)</span></p></div>
<h1>ToJSON. A function that creates JSON Documents</h1>
<p>Firstly, we need a simple utility function:</p>
<div class="listing"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">IF</span> <span style="COLOR: fuchsia">OBJECT_ID</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: red">N'dbo.parseJSON'</span><span style="COLOR: gray">)</span> <span style="COLOR: gray">IS</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">NULL</span> 
<p class="MsoNormal"><span>&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">DROP</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">FUNCTION</span> dbo<span style="COLOR: gray">.</span>JSONEscaped</p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">GO</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">&nbsp;</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CREATE</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">FUNCTION</span> JSONEscaped<span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue"> </span><span style="COLOR: gray">(</span> <span style="COLOR: green">/*
 this is a simple utility function that takes a SQL String with all its 
clobber and outputs it as a sting with all the JSON escape sequences in 
it.*/</span></p>
<p class="MsoNormal"><span>&nbsp; </span>@Unescaped <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">)</span> <span style="COLOR: green">--a string with maybe characters that will break json</span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">RETURNS</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">AS</span> </p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">BEGIN</span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span><span>&nbsp; </span>@Unescaped <span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">REPLACE</span><span style="COLOR: gray">(</span>@Unescaped<span style="COLOR: gray">,</span> FROMString<span style="COLOR: gray">,</span> TOString<span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">FROM<span>&nbsp;&nbsp;&nbsp; </span></span><span style="COLOR: gray">(</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: red">'\"'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">AS</span> FromString<span style="COLOR: gray">,</span> <span style="COLOR: red">'"'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">AS</span> ToString</p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span> <span style="COLOR: red">'\'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'\\'</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span> <span style="COLOR: red">'/'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'\/'</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>08<span style="COLOR: gray">),</span><span style="COLOR: red">'\b'</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>12<span style="COLOR: gray">),</span><span style="COLOR: red">'\f'</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">),</span><span style="COLOR: red">'\n'</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>13<span style="COLOR: gray">),</span><span style="COLOR: red">'\r'</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">UNION</span> <span style="COLOR: gray">ALL</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>09<span style="COLOR: gray">),</span><span style="COLOR: red">'\t'</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">)</span> substitutions</p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">RETURN</span> @Unescaped</p>
<p class="MsoNormal"><span style="LINE-HEIGHT: 115%; COLOR: blue">END</span></p></div>
<p>And now, the function that takes a JSON Hierarchy table and converts it to a JSON string.</p>
<div class="listing"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">IF</span> <span style="COLOR: fuchsia">OBJECT_ID</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: red">N'dbo.ToJSON'</span><span style="COLOR: gray">)</span> <span style="COLOR: gray">IS</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">NULL</span> 
<p class="MsoNormal"><span>&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">DROP</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">FUNCTION</span> dbo<span style="COLOR: gray">.</span>ToJSON </p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">GO</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">&nbsp;</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CREATE</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">FUNCTION</span> ToJSON </p>
<p class="MsoNormal"><span style="COLOR: gray">(</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@Hierarchy JSONHierarchy <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">READONLY</span></p>
<p class="MsoNormal"><span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">RETURNS</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">)</span><span style="COLOR: green">--JSON documents are always unicode.</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">AS</span></p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">BEGIN</span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">DECLARE</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span>@JSON <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">),</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span>@NewJSON <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">),</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span>@Where <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">INT</span><span style="COLOR: gray">,</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span>@ANumber <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">INT</span><span style="COLOR: gray">,</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span>@notNumber <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">INT</span><span style="COLOR: gray">,</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span>@indent <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">INT</span><span style="COLOR: gray">,</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span>@CrLf <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>2<span style="COLOR: gray">)</span><span style="COLOR: green">--just a simple utility to save typing!</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="COLOR: green">--firstly get the root token into place </span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span> @CrLf<span style="COLOR: gray">=</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>13<span style="COLOR: gray">)+</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">),</span><span style="COLOR: green">--just CHAR(10) in UNIX</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@JSON <span style="COLOR: gray">=</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CASE</span> ValueType <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">WHEN</span> <span style="COLOR: red">'array'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">THEN</span> <span style="COLOR: red">'['</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">ELSE</span> <span style="COLOR: red">'{'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">END</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span>@CrLf<span style="COLOR: gray">+</span> <span style="COLOR: red">'@Object'</span><span style="COLOR: gray">+</span><span style="COLOR: fuchsia">CONVERT</span><span style="COLOR: gray">(</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">VARCHAR</span><span style="COLOR: gray">(</span>5<span style="COLOR: gray">),</span><span style="COLOR: fuchsia">OBJECT_ID</span><span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span>@CrLf<span style="COLOR: gray">+</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CASE</span> ValueType <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">WHEN</span> <span style="COLOR: red">'array'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">THEN</span> <span style="COLOR: red">']'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">ELSE</span> <span style="COLOR: red">'}'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">END</span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">FROM</span> @Hierarchy </p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">WHERE</span> parent_id <span style="COLOR: gray">IS</span> <span style="COLOR: gray">NULL</span> <span style="COLOR: gray">AND</span> valueType <span style="COLOR: gray">IN</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: red">'object'</span><span style="COLOR: gray">,</span><span style="COLOR: red">'array'</span><span style="COLOR: gray">)</span> <span style="COLOR: green">--get the root element</span></p>
<p class="MsoNormal"><span style="COLOR: green">/* now we simply iterate
 from the root token growing each branch and leaf in each iteration. 
This won't be enormously quick, but it is simple to do. All values, or 
name/value pairs withing a structure can be created in one SQL 
Statement*/</span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">WHILE</span> 1<span style="COLOR: gray">=</span>1</p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">begin</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span> @where<span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[^[a-zA-Z0-9]@Object%'</span><span style="COLOR: gray">,</span>@json<span style="COLOR: gray">)</span><span style="COLOR: green">--find NEXT token</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">if</span> @where<span style="COLOR: gray">=</span>0 <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">BREAK</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* this is slightly painful. we get the indent of the object we've found by looking backwards up the string */</span> </p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SET</span> @indent<span style="COLOR: gray">=</span><span style="COLOR: fuchsia">CHARINDEX</span><span style="COLOR: gray">(</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">char</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">)+</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">char</span><span style="COLOR: gray">(</span>13<span style="COLOR: gray">),</span><span style="COLOR: fuchsia">Reverse</span><span style="COLOR: gray">(LEFT(</span>@json<span style="COLOR: gray">,</span>@where<span style="COLOR: gray">))+</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">char</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">)+</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">char</span><span style="COLOR: gray">(</span>13<span style="COLOR: gray">))-</span>1</p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SET</span> @NotNumber<span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[^0-9]%'</span><span style="COLOR: gray">,</span> <span style="COLOR: gray">RIGHT(</span>@json<span style="COLOR: gray">,</span><span style="COLOR: fuchsia">LEN</span><span style="COLOR: gray">(</span>@JSON<span style="COLOR: gray">+</span><span style="COLOR: red">'|'</span><span style="COLOR: gray">)-</span>@Where<span style="COLOR: gray">-</span>8<span style="COLOR: gray">)+</span><span style="COLOR: red">' '</span><span style="COLOR: gray">)</span><span style="COLOR: green">--find NEXT token</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SET</span> @NewJSON<span style="COLOR: gray">=NULL</span> <span style="COLOR: green">--this contains the structure in its JSON form</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">SELECT</span> @NewJSON<span style="COLOR: gray">=</span><span style="COLOR: fuchsia">COALESCE</span><span style="COLOR: gray">(</span>@NewJSON<span style="COLOR: gray">+</span><span style="COLOR: red">','</span><span style="COLOR: gray">+</span>@CrLf<span style="COLOR: gray">+</span><span style="COLOR: fuchsia">SPACE</span><span style="COLOR: gray">(</span>@indent<span style="COLOR: gray">),</span><span style="COLOR: red">''</span><span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span><span style="COLOR: fuchsia">COALESCE</span><span style="COLOR: gray">(</span><span style="COLOR: red">'"'</span><span style="COLOR: gray">+</span>NAME<span style="COLOR: gray">+</span><span style="COLOR: red">'" : '</span><span style="COLOR: gray">,</span><span style="COLOR: red">''</span><span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">CASE</span> valuetype </p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">WHEN</span> <span style="COLOR: red">'array'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">THEN</span> <span style="COLOR: red">'<span>&nbsp; </span>['</span><span style="COLOR: gray">+</span>@CrLf<span style="COLOR: gray">+</span><span style="COLOR: fuchsia">SPACE</span><span style="COLOR: gray">(</span>@indent<span style="COLOR: gray">+</span>2<span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span><span style="COLOR: red">'@Object'</span><span style="COLOR: gray">+</span><span style="COLOR: fuchsia">CONVERT</span><span style="COLOR: gray">(</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">VARCHAR</span><span style="COLOR: gray">(</span>5<span style="COLOR: gray">),</span><span style="COLOR: fuchsia">OBJECT_ID</span><span style="COLOR: gray">)+</span>@CrLf<span style="COLOR: gray">+</span><span style="COLOR: fuchsia">SPACE</span><span style="COLOR: gray">(</span>@indent<span style="COLOR: gray">+</span>2<span style="COLOR: gray">)+</span><span style="COLOR: red">']'</span> </p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">WHEN</span> <span style="COLOR: red">'object'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">then</span> <span style="COLOR: red">'<span>&nbsp; </span>{'</span><span style="COLOR: gray">+</span>@CrLf<span style="COLOR: gray">+</span><span style="COLOR: fuchsia">SPACE</span><span style="COLOR: gray">(</span>@indent<span style="COLOR: gray">+</span>2<span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span><span style="COLOR: red">'@Object'</span><span style="COLOR: gray">+</span><span style="COLOR: fuchsia">CONVERT</span><span style="COLOR: gray">(</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">VARCHAR</span><span style="COLOR: gray">(</span>5<span style="COLOR: gray">),</span><span style="COLOR: fuchsia">OBJECT_ID</span><span style="COLOR: gray">)+</span>@CrLf<span style="COLOR: gray">+</span><span style="COLOR: fuchsia">SPACE</span><span style="COLOR: gray">(</span>@indent<span style="COLOR: gray">+</span>2<span style="COLOR: gray">)+</span><span style="COLOR: red">'}'</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">WHEN</span> <span style="COLOR: red">'string'</span> <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">THEN</span> <span style="COLOR: red">'"'</span><span style="COLOR: gray">+</span>dbo<span style="COLOR: gray">.</span>JSONEscaped<span style="COLOR: gray">(</span>StringValue<span style="COLOR: gray">)+</span><span style="COLOR: red">'"'</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">ELSE</span> StringValue</p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">END</span> </p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">FROM</span> @Hierarchy <span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">WHERE</span> parent_id<span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@JSON<span style="COLOR: gray">,</span>@where<span style="COLOR: gray">+</span>8<span style="COLOR: gray">,</span> @Notnumber<span style="COLOR: gray">-</span>1<span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* basically, we just lookup the structure based on the ID that is appended to the @Object token. Simple eh? */</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">--now we replace the token with the structure, maybe with more tokens in it.</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">Select</span> @JSON<span style="COLOR: gray">=</span><span style="COLOR: fuchsia">STUFF</span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue"> </span><span style="COLOR: gray">(</span>@JSON<span style="COLOR: gray">,</span> @where<span style="COLOR: gray">+</span>1<span style="COLOR: gray">,</span> 8<span style="COLOR: gray">+</span>@NotNumber<span style="COLOR: gray">-</span>1<span style="COLOR: gray">,</span> @NewJSON<span style="COLOR: gray">)</span></p>
<p class="MsoNormal"><span>&nbsp;&nbsp;&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">end</span></p>
<p class="MsoNormal"><span>&nbsp; </span><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">return</span> @JSON</p>
<p class="MsoNormal"><span style="FONT-FAMILY: 'Courier New',Courier,monospace; COLOR: blue">end</span></p></div>
<h1>ToXML. A function that creates XML</h1>
<p>The function that converts a hierarchy&nbsp; table to XML gives us a 
JSON to XML converter. It is surprisingly similar to the previous 
function</p>
<div class="listing">
<p>&nbsp;</p>
<p><span style="COLOR: blue; mso-no-proof: yes">IF</span><span style="mso-no-proof: yes"> <span style="COLOR: fuchsia">OBJECT_ID</span><span style="COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: red">N'dbo.ToXML'</span><span style="COLOR: gray">)</span> <span style="COLOR: gray">IS</span> <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">NULL</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp; </span><span style="COLOR: blue">DROP</span> <span style="COLOR: blue">FUNCTION</span> dbo<span style="COLOR: gray">.</span>ToXML</span></p>
<p><span style="COLOR: blue; mso-no-proof: yes">GO</span></p>
<p><span style="COLOR: blue; mso-no-proof: yes">CREATE</span><span style="mso-no-proof: yes"> <span style="COLOR: blue">FUNCTION</span> ToXML</span></p>
<p><span style="COLOR: gray; mso-no-proof: yes">(</span></p>
<p><span style="COLOR: green; mso-no-proof: yes">/*this function 
converts a JSONhierarchy table into an XML document. This uses the same 
technique as the toJSON function, and uses the 'entities' form of XML 
syntax to give a compact rendering of the structure */</span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@Hierarchy JSONHierarchy <span style="COLOR: blue">READONLY</span></span></p>
<p><span style="COLOR: gray; mso-no-proof: yes">)</span></p>
<p><span style="COLOR: blue; mso-no-proof: yes">RETURNS</span><span style="mso-no-proof: yes"> <span style="COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">)</span><span style="COLOR: green">--use unicode.</span></span></p>
<p><span style="COLOR: blue; mso-no-proof: yes">AS</span></p>
<p><span style="COLOR: blue; mso-no-proof: yes">BEGIN</span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp; </span><span style="COLOR: blue">DECLARE</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@XMLAsString <span style="COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">),</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@NewXML <span style="COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">),</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@Entities <span style="COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">),</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@Objects <span style="COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">MAX</span><span style="COLOR: gray">),</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@Name <span style="COLOR: blue">NVARCHAR</span><span style="COLOR: gray">(</span>200<span style="COLOR: gray">),</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@Where <span style="COLOR: blue">INT</span><span style="COLOR: gray">,</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@ANumber <span style="COLOR: blue">INT</span><span style="COLOR: gray">,</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@notNumber <span style="COLOR: blue">INT</span><span style="COLOR: gray">,</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@indent <span style="COLOR: blue">INT</span><span style="COLOR: gray">,</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>@CrLf <span style="COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>2<span style="COLOR: gray">)</span><span style="COLOR: green">--just a simple utility to save typing!</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp; </span><span style="COLOR: green">--firstly get the root token into place </span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp; </span><span style="COLOR: green">--firstly get the root token into place </span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp; </span><span style="COLOR: blue">SELECT</span> @CrLf<span style="COLOR: gray">=</span><span style="COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>13<span style="COLOR: gray">)+</span><span style="COLOR: blue">CHAR</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">),</span><span style="COLOR: green">--just CHAR(10) in UNIX</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>@XMLasString <span style="COLOR: gray">=</span><span style="COLOR: red">'&lt;?xml version="1.0" ?&gt;</span></span></p>
<p><span style="COLOR: red; mso-no-proof: yes">@Object'</span><span style="COLOR: gray; mso-no-proof: yes">+</span><span style="COLOR: fuchsia; mso-no-proof: yes">CONVERT</span><span style="COLOR: gray; mso-no-proof: yes">(</span><span style="FONT-FAMILY: 'Courier New'; COLOR: blue; mso-no-proof: yes">VARCHAR</span><span style="COLOR: gray; mso-no-proof: yes">(</span><span style="mso-no-proof: yes">5<span style="COLOR: gray">),</span><span style="COLOR: fuchsia">OBJECT_ID</span><span style="COLOR: gray">)+</span><span style="COLOR: red">'</span></span></p>
<p><span style="COLOR: red; mso-no-proof: yes">'</span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">FROM</span> @hierarchy </span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHERE</span> parent_id <span style="COLOR: gray">IS</span> <span style="COLOR: gray">NULL</span> <span style="COLOR: gray">AND</span> valueType <span style="COLOR: gray">IN</span><span style="COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: red">'object'</span><span style="COLOR: gray">,</span><span style="COLOR: red">'array'</span><span style="COLOR: gray">)</span> <span style="COLOR: green">--get the root element</span></span></p>
<p><span style="COLOR: green; mso-no-proof: yes">/* now we simply 
iterate from the root token growing each branch and leaf in each 
iteration. This won't be enormously quick, but it is simple to do. All 
values, or name/value pairs within a structure can be created in one SQL
 Statement*/</span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp; </span><span style="COLOR: blue">WHILE</span> 1<span style="COLOR: gray">=</span>1</span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">begin</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @where<span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[^a-zA-Z0-9]@Object%'</span><span style="COLOR: gray">,</span>@XMLAsString<span style="COLOR: gray">)</span><span style="COLOR: green">--find NEXT token</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">if</span> @where<span style="COLOR: gray">=</span>0 <span style="COLOR: blue">BREAK</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* this is slightly painful. we get the indent of the object we've found by looking backwards up the string */</span> </span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SET</span> @indent<span style="COLOR: gray">=</span><span style="COLOR: fuchsia">CHARINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: blue">char</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">)+</span><span style="COLOR: blue">char</span><span style="COLOR: gray">(</span>13<span style="COLOR: gray">),</span><span style="COLOR: fuchsia">Reverse</span><span style="COLOR: gray">(LEFT(</span>@XMLasString<span style="COLOR: gray">,</span>@where<span style="COLOR: gray">))+</span><span style="COLOR: blue">char</span><span style="COLOR: gray">(</span>10<span style="COLOR: gray">)+</span><span style="COLOR: blue">char</span><span style="COLOR: gray">(</span>13<span style="COLOR: gray">))-</span>1</span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SET</span> @NotNumber<span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">PATINDEX</span><span style="COLOR: gray">(</span><span style="COLOR: red">'%[^0-9]%'</span><span style="COLOR: gray">,</span> <span style="COLOR: gray">RIGHT(</span>@XMLasString<span style="COLOR: gray">,</span><span style="COLOR: fuchsia">LEN</span><span style="COLOR: gray">(</span>@XMLAsString<span style="COLOR: gray">+</span><span style="COLOR: red">'|'</span><span style="COLOR: gray">)-</span>@Where<span style="COLOR: gray">-</span>8<span style="COLOR: gray">)+</span><span style="COLOR: red">' '</span><span style="COLOR: gray">)</span><span style="COLOR: green">--find NEXT token</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SET</span> @Entities<span style="COLOR: gray">=NULL</span> <span style="COLOR: green">--this contains the structure in its XML form</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @Entities<span style="COLOR: gray">=</span><span style="COLOR: fuchsia">COALESCE</span><span style="COLOR: gray">(</span>@Entities<span style="COLOR: gray">+</span><span style="COLOR: red">' '</span><span style="COLOR: gray">,</span><span style="COLOR: red">' '</span><span style="COLOR: gray">)+</span>NAME<span style="COLOR: gray">+</span><span style="COLOR: red">'="'</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span><span style="COLOR: fuchsia">REPLACE</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">REPLACE</span><span style="COLOR: gray">(</span><span style="COLOR: fuchsia">REPLACE</span><span style="COLOR: gray">(</span>StringValue<span style="COLOR: gray">,</span> <span style="COLOR: red">'&lt;'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'&amp;lt;'</span><span style="COLOR: gray">),</span> <span style="COLOR: red">'&amp;'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'&amp;amp;'</span><span style="COLOR: gray">),</span><span style="COLOR: red">'&gt;'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'&amp;gt;'</span><span style="COLOR: gray">)</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span> <span style="COLOR: red">'"'</span><span style="mso-spacerun: yes">&nbsp; </span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">FROM</span> @hierarchy </span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHERE</span> parent_id<span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@XMLasString<span style="COLOR: gray">,</span>@where<span style="COLOR: gray">+</span>8<span style="COLOR: gray">,</span> @Notnumber<span style="COLOR: gray">-</span>1<span style="COLOR: gray">)</span> </span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">AND</span> ValueType <span style="COLOR: gray">NOT</span> <span style="COLOR: gray">IN</span><span style="COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: red">'array'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'object'</span><span style="COLOR: gray">)</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @Entities<span style="COLOR: gray">=</span><span style="COLOR: fuchsia">COALESCE</span><span style="COLOR: gray">(</span>@entities<span style="COLOR: gray">,</span><span style="COLOR: red">''</span><span style="COLOR: gray">),</span>@Objects<span style="COLOR: gray">=</span><span style="COLOR: red">''</span><span style="COLOR: gray">,</span>@name<span style="COLOR: gray">=</span><span style="COLOR: blue">CASE</span> <span style="COLOR: blue">WHEN</span> Name<span style="COLOR: gray">=</span><span style="COLOR: red">'-'</span> <span style="COLOR: blue">THEN</span> <span style="COLOR: red">'root'</span> <span style="COLOR: blue">ELSE</span> NAME <span style="COLOR: blue">end</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">FROM</span> @hierarchy </span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHERE</span> [Object_id]<span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@XMLasString<span style="COLOR: gray">,</span>@where<span style="COLOR: gray">+</span>8<span style="COLOR: gray">,</span> @Notnumber<span style="COLOR: gray">-</span>1<span style="COLOR: gray">)</span> </span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span><span style="mso-spacerun: yes">&nbsp; </span>@Objects<span style="COLOR: gray">=</span>@Objects<span style="COLOR: gray">+</span>@CrLf<span style="COLOR: gray">+</span><span style="COLOR: fuchsia">SPACE</span><span style="COLOR: gray">(</span>@indent<span style="COLOR: gray">+</span>2<span style="COLOR: gray">)</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span><span style="COLOR: red">'@Object'</span><span style="COLOR: gray">+</span><span style="COLOR: fuchsia">CONVERT</span><span style="COLOR: gray">(</span><span style="COLOR: blue">VARCHAR</span><span style="COLOR: gray">(</span>5<span style="COLOR: gray">),</span><span style="COLOR: fuchsia">OBJECT_ID</span><span style="COLOR: gray">)</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">--+@CrLf+SPACE(@indent+2)+''</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">FROM</span> @hierarchy </span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">WHERE</span> parent_id<span style="COLOR: gray">=</span> <span style="COLOR: fuchsia">SUBSTRING</span><span style="COLOR: gray">(</span>@XMLasString<span style="COLOR: gray">,</span>@where<span style="COLOR: gray">+</span>8<span style="COLOR: gray">,</span> @Notnumber<span style="COLOR: gray">-</span>1<span style="COLOR: gray">)</span> </span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">AND</span> ValueType <span style="COLOR: gray">IN</span><span style="COLOR: blue"> </span><span style="COLOR: gray">(</span><span style="COLOR: red">'array'</span><span style="COLOR: gray">,</span> <span style="COLOR: red">'object'</span><span style="COLOR: gray">)</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">IF</span> @Objects<span style="COLOR: gray">=</span><span style="COLOR: red">''</span> <span style="COLOR: green">--if it is a lef, we can do a more compact rendering</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @NewXML<span style="COLOR: gray">=</span><span style="COLOR: red">'&lt;'</span><span style="COLOR: gray">+</span><span style="COLOR: fuchsia">COALESCE</span><span style="COLOR: gray">(</span>@name<span style="COLOR: gray">,</span><span style="COLOR: red">'item'</span><span style="COLOR: gray">)+</span>@entities<span style="COLOR: gray">+</span><span style="COLOR: red">' /&gt;'</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">ELSE</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">SELECT</span> @NewXML<span style="COLOR: gray">=</span><span style="COLOR: red">'&lt;'</span><span style="COLOR: gray">+</span><span style="COLOR: fuchsia">COALESCE</span><span style="COLOR: gray">(</span>@name<span style="COLOR: gray">,</span><span style="COLOR: red">'item'</span><span style="COLOR: gray">)+</span>@entities<span style="COLOR: gray">+</span><span style="COLOR: red">'&gt;'</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: gray">+</span>@Objects<span style="COLOR: gray">+</span>@CrLf<span style="COLOR: gray">++</span><span style="COLOR: fuchsia">SPACE</span><span style="COLOR: gray">(</span>@indent<span style="COLOR: gray">)+</span><span style="COLOR: red">'&lt;/'</span><span style="COLOR: gray">+</span><span style="COLOR: fuchsia">COALESCE</span><span style="COLOR: gray">(</span>@name<span style="COLOR: gray">,</span><span style="COLOR: red">'item'</span><span style="COLOR: gray">)+</span><span style="COLOR: red">'&gt;'</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">/* basically, we just lookup the structure based on the ID that is appended to the @Object token. Simple eh? */</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: green">--now we replace the token with the structure, maybe with more tokens in it.</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">Select</span> @XMLasString<span style="COLOR: gray">=</span><span style="COLOR: fuchsia">STUFF</span><span style="COLOR: blue"> </span><span style="COLOR: gray">(</span>@XMLasString<span style="COLOR: gray">,</span> @where<span style="COLOR: gray">+</span>1<span style="COLOR: gray">,</span> 8<span style="COLOR: gray">+</span>@NotNumber<span style="COLOR: gray">-</span>1<span style="COLOR: gray">,</span> @NewXML<span style="COLOR: gray">)</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span><span style="COLOR: blue">end</span></span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp; </span><span style="COLOR: blue">return</span> @XMLasString</span></p>
<p><span style="mso-no-proof: yes"><span style="mso-spacerun: yes">&nbsp; </span><span style="COLOR: blue">end</span></span></p></div>
<p>This provides you the means of converting a JSON string into XML</p>
<div class="listing">
<p><span>DECLARE</span><span> @MyHierarchy JSONHierarchy<span style="COLOR: gray">,</span>@xml <span style="COLOR: blue">XML</span></span></p>
<p><span>INSERT</span><span> <span style="COLOR: blue">INTO</span> @myHierarchy </span></p>
<p><span>select</span><span> <span style="COLOR: gray">*</span> <span style="COLOR: blue">from</span> parseJSON<span style="COLOR: gray">(</span><span style="COLOR: red">'{"menu": {</span></span></p>
<p><span style="COLOR: red"><span style="mso-spacerun: yes">&nbsp; </span>"id": "file",</span></p>
<p><span style="COLOR: red"><span style="mso-spacerun: yes">&nbsp; </span>"value": "File",</span></p>
<p><span style="COLOR: red"><span style="mso-spacerun: yes">&nbsp; </span>"popup": {</span></p>
<p><span style="COLOR: red"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>"menuitem": [</span></p>
<p><span style="COLOR: red"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{"value": "New", "onclick": "CreateNewDoc()"},</span></p>
<p><span style="COLOR: red"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{"value": "Open", "onclick": "OpenDoc()"},</span></p>
<p><span style="COLOR: red"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{"value": "Close", "onclick": "CloseDoc()"}</span></p>
<p><span style="COLOR: red"><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>]</span></p>
<p><span style="COLOR: red"><span style="mso-spacerun: yes">&nbsp; </span>}</span></p>
<p><span style="COLOR: red">}}'</span><span style="COLOR: gray">)</span></p>
<p><span style="COLOR: blue">SELECT</span><span> dbo<span style="COLOR: gray">.</span>ToXML<span style="COLOR: gray">(</span>@MyHierarchy<span style="COLOR: gray">)</span></span></p>
<p><span style="COLOR: blue">SELECT</span><span> @XML<span style="COLOR: gray">=</span>dbo<span style="COLOR: gray">.</span>ToXML<span style="COLOR: gray">(</span>@MyHierarchy<span style="COLOR: gray">)</span></span></p>
<p><span style="LINE-HEIGHT: 115%; COLOR: blue">SELECT</span><span style="LINE-HEIGHT: 115%"> @XML</span></p></div>
<p>This gives the result...</p>
<div class="listing">
<p>&nbsp;</p>
<p><span>&lt;?xml version="1.0" ?&gt;</span></p>
<p><span>&lt;root&gt;</span></p>
<p><span><span style="mso-spacerun: yes">&nbsp; </span>&lt;menu id="file" value="File"&gt;</span></p>
<p><span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>&lt;popup&gt;</span></p>
<p><span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;menuitem&gt;</span></p>
<p><span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;item value="New" onclick="CreateNewDoc()" /&gt;</span></p>
<p><span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;item value="Open" onclick="OpenDoc()" /&gt;</span></p>
<p><span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;item value="Close" onclick="CloseDoc()" /&gt;</span></p>
<p><span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&lt;/menuitem&gt;</span></p>
<p><span><span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>&lt;/popup&gt;</span></p>
<p><span><span style="mso-spacerun: yes">&nbsp; </span>&lt;/menu&gt;</span></p>
<p><span>&lt;/root&gt;</span></p>
<p><span>&nbsp;</span></p>
<p><span>&nbsp;</span></p>
<p><span>(1 row(s) affected)</span></p>
<p><span>&nbsp;</span></p>
<p><span>&nbsp;</span></p>
<p><span>&lt;root&gt;&lt;menu id="file" 
value="File"&gt;&lt;popup&gt;&lt;menuitem&gt;&lt;item value="New" 
onclick="CreateNewDoc()" /&gt;&lt;item value="Open" onclick="OpenDoc()" 
/&gt;&lt;item value="Close" onclick="CloseDoc()" 
/&gt;&lt;/menuitem&gt;&lt;/popup&gt;&lt;/menu&gt;&lt;/root&gt;</span></p>
<p><span>&nbsp;</span></p>
<p><span style="LINE-HEIGHT: 115%; FONT-FAMILY: 'Courier New'; mso-no-proof: yes">(1 row(s) affected)</span></p></div>
<h1>Wrap-up</h1>
<p>The so-called 'impedence-mismatch' between applications and databases
 is, I reckon, an illusion. The object-oriented nested data-structures 
that we receive from applications are, if the developer has understood 
the data correctly,&nbsp; merely a perspective from a particular entity 
of the relationships it is involved with. Whereas it is easy to shred 
XML documents to get the data from it to update the database, it has 
been trickier with other formats such as JSON. By using techniques like 
this, it should be possible to liberate the application, or website, 
programmer from having to do the mapping from the object model to the 
relational, and spraying the database with ad-hoc TSQL<span>&nbsp; </span>that
 uses the base tables or updateable views.&nbsp; If the database can be 
provided with the JSON, or the Table-Valued parameter, then there is a 
better chance of&nbsp; maintaining full transactional integrity for the 
more complex updates.</p>
<p class="MsoNormal"><span lang="EN-US">The database developer already 
has the tools to do the work with XML, but why not the simpler, and more
 practical JSON? I hope these two routines get you started with 
experimenting with this.</span></p>
<h1>Interesting JSON-related articles and sites</h1>
<ul style="LIST-STYLE-TYPE: none">
<li><a href="http://www.yaml.org/">YAML: YAML Ain't Markup Language</a> 
</li><li><a href="http://en.wikipedia.org/wiki/XMLHttpRequest">XMLHttpRequest</a> 
</li><li><a href="http://www.json.org/">Introducing JSON </a>
</li><li><a href="http://www.json.org/fatfree.html">JSON: The Fat-Free Alternative to XML </a>
</li><li><a href="http://www.simple-talk.com/opinion/geek-of-the-week/doug-crockford-geek-of-the-week/">Doug Crockford: Geek of the Week</a> 
</li><li><a href="http://www.simple-talk.com/sql/t-sql-programming/json-and-other-data-serialization-languages/">JSON and other data serialization languages</a> 
</li><li><a href="http://en.wikipedia.org/wiki/WDDX">WDDX </a>
</li><li><a href="http://www.odata.org/developers/protocols/json-format">OData: JavaScript Object Notation (JSON) Format </a>
</li><li><a href="http://bitworking.org/projects/atom/rfc5023.html">The Atom Publishing Protocol</a> </li></ul></div>
    
    

    <div class="content-meta">
      <div class="share-tools"><div class="addthis_toolbox addthis_default_style"><p>Thank this author by sharing:</p><a class="addthis_button_google_plusone at300b" g:plusone:annotation="none"><div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 24px; height: 15px;"><iframe title="+1" data-gapiattached="true" allowtransparency="true" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/fastbutton.htm" name="I0_1375084813186" id="I0_1375084813186" vspace="0" tabindex="0" style="position: static; top: 0px; width: 24px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 15px;" marginwidth="0" marginheight="0" hspace="0" frameborder="0" scrolling="no" width="100%"></iframe></div></a><a title="Linkedin" target="_blank" href="https://www.addthis.com/bookmark.php?v=300&amp;winname=addthis&amp;pub=ra-4f3bb4c87aeb8915&amp;source=tbx-300&amp;lng=ru-RU&amp;s=linkedin&amp;url=https%3A%2F%2Fwww.simple-talk.com%2Fsql%2Ft-sql-programming%2Fconsuming-json-strings-in-sql-server%2F&amp;title=Consuming%20JSON%20Strings%20in%20SQL%20Server&amp;ate=AT-ra-4f3bb4c87aeb8915/-/-/51f621091b620483/2&amp;frommenu=1&amp;uid=51f62109e5ca1d33&amp;ct=1&amp;pre=http%3A%2F%2Fyandex.ru%2Fyandsearch%3Ftext%3DMSSQL%2520JSON%2520T-SQL%26lr%3D11080&amp;tt=0&amp;captcha_provider=nucaptcha" class="addthis_button_linkedin at300b"><span class="at16nc at300bs at15nc at15t_linkedin at16t_linkedin"><span class="at_a11y">Share on linkedin</span></span></a><a href="#" title="Facebook" class="addthis_button_facebook at300b"><span class="at16nc at300bs at15nc at15t_facebook at16t_facebook"><span class="at_a11y">Share on facebook</span></span></a><a href="#" title="Tweet" class="addthis_button_twitter at300b"><span class="at16nc at300bs at15nc at15t_twitter at16t_twitter"><span class="at_a11y">Share on twitter</span></span></a><a href="#" style="display: block;" class="addthis_counter addthis_bubble_style"><a href="#" title="View more services" target="_blank" class="addthis_button_expanded">8</a><a class="atc_s addthis_button_compact"><span></span></a></a><div class="atclear"></div></div></div>
      This article has been viewed 59507 times.
    </div>
  </div>

  
<div class="authorpanel">
    <a id="ctl00_MainContent_Author1_lnkImage" title="Phil Factor" href="https://www.simple-talk.com/author/phil-factor/"><img id="ctl00_MainContent_Author1_imgAuthor" class="authorpicture" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/3.gif" alt="Phil Factor" style="border-width:0px;" align="left"></a>
    <p><strong>Author profile:</strong> <a id="ctl00_MainContent_Author1_lnkName" href="https://www.simple-talk.com/author/phil-factor/">Phil Factor</a></p>
    <p>Phil Factor (real name withheld to protect the guilty), aka 
Database Mole, has 30 years of experience with database-intensive 
applications. Despite having once been shouted at by a furious Bill 
Gates at an exhibition in the early 1980s, he has remained resolutely 
anonymous throughout his career. See also :
</p><ul>
<li><a href="http://www.simple-talk.com/community/blogs/philfactor/default.aspx">The Phrenetic Phoughts of Phil Factor</a></li><a href="http://www.simple-talk.com/community/blogs/philfactor/default.aspx">
</a><li><a href="http://www.simple-talk.com/community/blogs/philfactor/default.aspx"></a><a href="http://twitter.com/Phil_Factor">Phil on Twitter</a></li><li><a href="http://www.sqlservercentral.com/blogs/philfactor/">Phil on SQL Server Central</a></li> 
<li><a href="http://www.simple-talk.com/author/robyn-page-and-phil-factor/">Robyn and Phil's Workbenches</a>
</li><li><a href="http://www.sqlservercentral.com/Authors/Articles/Phil_Factor/322525/">Phil's Editorials on SQL Server Central</a></li></ul>
  <a href="https://plus.google.com/106425589704685208213?rel=author">Google +</a>
To translate this article...<div id="google_translate_element"><div style="" dir="ltr" class="skiptranslate goog-te-gadget"><div id=":0.targetLanguage"><select class="goog-te-combo"><option selected="selected" value="">Выбрать язык</option><option value="ru">русский</option><option value="az">азербайджанский</option><option value="sq">албанский</option><option value="ar">арабский</option><option value="hy">армянский</option><option value="af">африкаанс</option><option value="eu">баскский</option><option value="be">белорусский</option><option value="bn">бенгальский</option><option value="bg">болгарский</option><option value="bs">боснийский</option><option value="cy">валлийский</option><option value="hu">венгерский</option><option value="vi">вьетнамский</option><option value="gl">галисийский</option><option value="nl">голландский</option><option value="el">греческий</option><option value="ka">грузинский</option><option value="gu">гуджарати</option><option value="da">датский</option><option value="iw">иврит</option><option value="yi">идиш</option><option value="id">индонезийский</option><option value="ga">ирландский</option><option value="is">исландский</option><option value="es">испанский</option><option value="it">итальянский</option><option value="kn">каннада</option><option value="ca">каталанский</option><option value="zh-TW">китайский (традиционный)</option><option value="zh-CN">китайский (упрощенный)</option><option value="ko">корейский</option><option value="ht">креольский (Гаити)</option><option value="km">кхмерский</option><option value="lo">лаосский</option><option value="la">латынь</option><option value="lv">латышский</option><option value="lt">литовский</option><option value="mk">македонский</option><option value="ms">малайский</option><option value="mt">мальтийский</option><option value="mr">маратхи</option><option value="de">немецкий</option><option value="no">норвежский</option><option value="fa">персидский</option><option value="pl">польский</option><option value="pt">португальский</option><option value="ro">румынский</option><option value="ceb">себуанский</option><option value="sr">сербский</option><option value="sk">словацкий</option><option value="sl">словенский</option><option value="sw">суахили</option><option value="tl">тагальский</option><option value="th">тайский</option><option value="ta">тамильский</option><option value="te">телугу</option><option value="tr">турецкий</option><option value="uk">украинский</option><option value="ur">урду</option><option value="fi">финский</option><option value="fr">французский</option><option value="hi">хинди</option><option value="hmn">хмонг</option><option value="hr">хорватский</option><option value="cs">чешский</option><option value="sv">шведский</option><option value="eo">эсперанто</option><option value="et">эстонский</option><option value="jw">яванский</option><option value="ja">японский</option></select></div>Технологии <span style="white-space:nowrap"><a class="goog-logo-link" href="http://translate.google.com/" target="_blank"><img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/google_logo_41.png" style="padding-right: 3px" height="13px" width="37px">Переводчик</a></span></div></div><script>
function googleTranslateElementInit() {
  new google.translate.TranslateElement({
    pageLanguage: 'en'
  }, 'google_translate_element');
}
</script><script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/element.js"></script><p></p>
    <p><a id="ctl00_MainContent_Author1_lnkSearch" href="https://www.simple-talk.com/author/phil-factor/">Search for other articles by Phil Factor</a></p>
    <div class="clear"></div>
</div>
  

  <form name="aspnetForm" method="post" action="https://www.simple-talk.com/content/article.aspx?article=1176" id="aspnetForm">
<div>
<input name="__EVENTTARGET" id="__EVENTTARGET" value="" type="hidden">
<input name="__EVENTARGUMENT" id="__EVENTARGUMENT" value="" type="hidden">
<input name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwUKMTA0MjUxNTg2MGQYAgUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgsFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzEFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzEFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzIFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzIFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzMFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzMFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzQFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzQFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzUFHGN0bDAwJE1haW5Db250ZW50JHJhZFJhdGluZzUFIGN0bDAwJE1haW5Db250ZW50JGJ0blJhdGVBcnRpY2xlBRFjdGwwMCROYXZpZ2F0aW9uMQ8UKwACZDL2BAABAAAA/////wEAAAAAAAAADAIAAABAV2ViU2l0ZSwgVmVyc2lvbj0xLjMuMC44MjEsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49bnVsbAQBAAAAelN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLkxpc3RgMVtbU2ltcGxlVGFsay5NZW51SXRlbSwgV2ViU2l0ZSwgVmVyc2lvbj0xLjMuMC44MjEsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49bnVsbF1dAwAAAAZfaXRlbXMFX3NpemUIX3ZlcnNpb24EAAAVU2ltcGxlVGFsay5NZW51SXRlbVtdAgAAAAgICQMAAAADAAAAAwAAAAcDAAAAAAEAAAAEAAAABBNTaW1wbGVUYWxrLk1lbnVJdGVtAgAAAAkEAAAACQUAAAAJBgAAAAoFBAAAABNTaW1wbGVUYWxrLk1lbnVJdGVtBAAAAAxtX0NoaWxkQ291bnQKbV9TZWxlY3RlZAdtX1RpdGxlBW1fVXJsAAABAQgBAgAAAAAAAAAABgcAAAAIU1FMIEhvbWUGCAAAACBodHRwczovL3d3dy5zaW1wbGUtdGFsay5jb20vc3FsLwEFAAAABAAAAAAAAAAABgkAAAARVC1TUUwgUHJvZ3JhbW1pbmcGCgAAADJodHRwczovL3d3dy5zaW1wbGUtdGFsay5jb20vc3FsL3Qtc3FsLXByb2dyYW1taW5nLwEGAAAABAAAAAAAAAAABgsAAAAkQ29uc3VtaW5nIEpTT04gU3RyaW5ncyBpbiBTUUwgU2VydmVyBgwAAAAAC2Q=" type="hidden">
</div>

<script type="text/javascript">
//<![CDATA[
var theForm = document.forms['aspnetForm'];
if (!theForm) {
    theForm = document.aspnetForm;
}
function __doPostBack(eventTarget, eventArgument) {
    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {
        theForm.__EVENTTARGET.value = eventTarget;
        theForm.__EVENTARGUMENT.value = eventArgument;
        theForm.submit();
    }
}
//]]>
</script>


<script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/WebResource.js" type="text/javascript"></script>


<script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/ScriptResource.js" type="text/javascript"></script>
<script type="text/javascript">
//<![CDATA[
if (typeof(Sys) === 'undefined') throw new Error('ASP.NET Ajax client-side framework failed to load.');
//]]>
</script>

<script src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/ScriptResource_002.js" type="text/javascript"></script>
    <script type="text/javascript">
//<![CDATA[
Sys.WebForms.PageRequestManager._initialize('ctl00$MainContent$ScriptManager1', document.getElementById('aspnetForm'));
Sys.WebForms.PageRequestManager.getInstance()._updateControls([], [], [], 90);
//]]>
</script>

    <script language="javascript" type="text/javascript">
      function EndRequestHandler() {
        if (theForm._initialAction == undefined)
          theForm._initialAction = theForm.action;
        else
          theForm.action = theForm._initialAction;
      }
      if (typeof (Sys) != "undefined") {
        EndRequestHandler();
        Sys.WebForms.PageRequestManager.getInstance().add_endRequest(EndRequestHandler);
      }
    </script>
    
  <div id="ctl00_MainContent_panVoting" class="rating">
	
    <strong>Rate this article:</strong> &nbsp;&nbsp;Avg rating: <img id="ctl00_MainContent_imgRating2" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/icon_plain_4stars.gif" style="height:13px;width:70px;border-width:0px;"> from a total of 55 votes.<br><br>
    <div id="ctl00_MainContent_panToRate">
		
        <table class="rating" border="0">
          <tbody><tr>
	        <td><input id="ctl00_MainContent_radRating1" name="ctl00$MainContent$radRating" value="radRating1" type="radio"><br>Poor</td>
	        <td><input id="ctl00_MainContent_radRating2" name="ctl00$MainContent$radRating" value="radRating2" type="radio"><br>OK</td>
	        <td><input id="ctl00_MainContent_radRating3" name="ctl00$MainContent$radRating" value="radRating3" type="radio"><br>Good</td>
	        <td><input id="ctl00_MainContent_radRating4" name="ctl00$MainContent$radRating" value="radRating4" type="radio"><br>Great</td>
	        <td><input id="ctl00_MainContent_radRating5" name="ctl00$MainContent$radRating" value="radRating5" type="radio"><br>Must read</td>
		    <td>
		        <input name="ctl00$MainContent$btnRateArticle" id="ctl00_MainContent_btnRateArticle" title="Rate article" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/btn_submit.gif" style="height:19px;width:56px;border-width:0px;" type="image">
		    </td>
	      </tr>
        </tbody></table>
    
	</div>
    
    
  
</div>
  
  <div id="ctl00_MainContent_panComments" class="comments">
	
    <a name="forum">&nbsp;</a>
    <div class="haveyoursayheader">
      <div class="title">Have Your Say</div>
        Do you have an opinion on this article? Then <a href="#commentform" class="commentlink"><u>add your comment below</u></a>:
      </div>
      <div class="forumview">
        <div id="ctl00_MainContent_ForumView1_panPostingNotAllowed" style="width:100%;">
	
    You must be logged in to post to this forum<br><br><a id="ctl00_MainContent_ForumView1_lnkLogin" href="https://www.simple-talk.com/community/login.aspx?ReturnUrl=%2fsql%2ft-sql-programming%2fconsuming-json-strings-in-sql-server%2f">Click here to log in</a>.

</div>


    <br><hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl01_lblSubject">'impedence-mismatch'</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl01_lblAuthor">realSantaClara</span></i> (<span class="inactive-link ">not signed in</span>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl01_lblDate">Tuesday, November 16, 2010 at 5:11 AM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl01_lblMessage">Phil  ...  you are amazing  ... but doesn't this very article demonstrate the real existence of 'impedence-mismatch' ?</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl03_lblSubject">Re: impedence-mismatch</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl03_lblAuthor">Phil Factor</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl03_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=2126">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl03_lblDate">Tuesday, November 16, 2010 at 6:24 AM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl03_lblMessage">Er,
 Maybe. However, if we had sensible ways of processing JSON or YAML 
strings from applications that are built-in like XML, then a lot of 
problems would vanish. What I meant to say was that JSON is so easy to 
produce from an application, Particularly Javascript, and are relatively
 easy to process from a stored procedure, that if we shared this 
language, a lot of problems would go away. No, getting XML from 
Javascript objects isn't as neat or trivial. I'm happy to make JSON the 
language of an application-interface, both ways.</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl05_lblSubject">.Net Assembly</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl05_lblAuthor">Sunny</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl05_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=6849">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl05_lblDate">Tuesday, November 16, 2010 at 9:37 AM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl05_lblMessage">As
 realSantaClara said: amazing T-SQL code! But it seems to me that this 
is an example to leave T-SQL and implement such things in an .Net 
Assembly ;-)</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl07_lblSubject">You quote Crockford, good</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl07_lblAuthor">BuggyFunBunny</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl07_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=14947">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl07_lblDate">Tuesday, November 16, 2010 at 12:29 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl07_lblMessage">-- Using recursion in TSQL is like Sumo Wrestlers doing Ballet.  It is possible but not pretty.<br><br>Well, no.  That's what the CTE paradigm is for.  Without CTE, then yes.<br><br><br>-- The so-called 'impedence-mismatch' between applications and databases is, I reckon, an illusion. <br><br>It
 is.  While the term was first used by (IIRC) OO programmers who hated 
the RM, the instance data of an object (and any included objects) is 
purely relational.  <br><br><br>-- The database developer already has the tools to do the work with XML, but why not the simpler, and more practical JSON?<br><br>Because
 the Suits that run companies producing Database Engines are just as 
ignorant as Suits everywhere else (I'm talking to you, Armonk).  XML is 
the Emperor's New Clothes, and loverly they are, too.  Remember, it was 
created by LAWYERS and propelled by OO coders.  Not a data geek to be 
found.</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl09_lblSubject">Re: Recursive CTEs</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl09_lblAuthor">Phil Factor</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl09_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=2126">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl09_lblDate">Tuesday, November 16, 2010 at 12:50 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl09_lblMessage">True
 but what about performance, compared with a procedural language? I use 
recursive CTEs, but I get better timings with an iterative solution in 
TSQL. Maybe I'm doing something wrong, so we might set this as a 
challenge in the Phil Factor Speed Phreak competition!</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl11_lblSubject">Disappointed</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl11_lblAuthor">Thought Police</span></i> (<span class="inactive-link ">not signed in</span>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl11_lblDate">Tuesday, November 16, 2010 at 1:03 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl11_lblMessage">"'Oh yes', will chime in the application thought police, 'this is far better done in the application or with a CLR.'"<br>*chime*<br>While
 this is a good trick, The only possible reason I can think of to use 
this monstrosity is a scenario that you point out, where there is no 
application infrastructure in place.<br>Where an CLR application layer 
is available, you can do JSON serialization/deserialization in a few 
lines of code. Using a hundred lines of complex sql nested calls instead
 goes against all basic participles of creating maintainable systems.<br>One
 whose rationale is that they "lack the necessary skills with procedural
 code" is the proverbial man whose only tool is a hammer. <br><br><br></span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl13_lblSubject">CLR? Your DBA let's you use that scary thing? </span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl13_lblAuthor">Anonymous</span></i> (<span class="inactive-link ">not signed in</span>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl13_lblDate">Tuesday, November 16, 2010 at 3:04 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl13_lblMessage">lol</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl15_lblSubject">json shred in CLR</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl15_lblAuthor">Anonymous</span></i> (<span class="inactive-link ">not signed in</span>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl15_lblDate">Tuesday, November 16, 2010 at 3:40 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl15_lblMessage">Its much too slow and cpu heavy in T-SQL for json of any size.<br><br>I tried various methods before opting for using an open source .net json libray in a CLR proc. <br><br>Described here http://www.sql-library.com/?p=140<br><br><br></span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl17_lblSubject">Re: JSON Shred in CLR</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl17_lblAuthor">Phil Factor</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl17_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=2126">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl17_lblDate">Wednesday, November 17, 2010 at 2:17 AM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl17_lblMessage">Sure.
 As I say in the article, CLR is the best choice for this sort of thing,
 if you have a choice. I don't know which is the best version of a CLR 
for shredding JSON so it would be great if anyone else who has had a 
good experience with a JSON CLR to leave a comment. I'd suspect that the
 best idea would be to have one that ships with the SQL Server product, 
particularly now that Microsoft supports OData. 
http://www.odata.org/developers/protocols/json-format<br><br>I certainly
 wouldn't want to shred Facebook info in TSQL! I wrote this code for a 
particular purpose that used reasonably short documents.</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl19_lblSubject">Oops</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl19_lblAuthor">Phil Factor</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl19_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=2126">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl19_lblDate">Sunday, November 21, 2010 at 4:53 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl19_lblMessage">Just fixed a bug that I noticed in the XML Outputter, and added the source to it the speechbubble at the top of the article.<br></span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl21_lblSubject">Nice job</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl21_lblAuthor">Robert Towne</span></i> (<span class="inactive-link ">not signed in</span>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl21_lblDate">Monday, November 22, 2010 at 10:09 AM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl21_lblMessage">Thanks,
 I thought about attempting something like this because my shop is 
anti-CLR for the most part (at least for unsafe assemblies).<br><br>To 
do this with a CLR function (someone please correct me if I am wrong) 
you need to add several unsafe assemblies to your production 
environment.  For example, if I wanted to use http://json.codeplex.com/,
 you would need to add 3 unsafe assemblies to get this to work.  Maybe 
not a problem for some shops, but understandably a problem for others.<br><br>Anyway, great post and good discussions.</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl23_lblSubject">another Json split for tsql</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl23_lblAuthor">ricva</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl23_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=15891">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl23_lblDate">Thursday, April 21, 2011 at 3:04 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl23_lblMessage">I
 also wrote a parser - fnSplitJson2, also all t-sql, and available for 
sql server 2005 and below or sql server 2008. Would have save you have 
the work :-)<br><br>http://www.sqlservercentral.com/articles/JSON/68128/<br><br>Find it very useful because it will also tell me the length and other errors that may occur in the string.</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl25_lblSubject">Re: another Json split for tsql</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl25_lblAuthor">Phil Factor</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl25_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=2126">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl25_lblDate">Friday, April 22, 2011 at 4:11 AM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl25_lblMessage">Ric's
 JSON splitter is on our sister publication SQL Server Central. It is 
well worth a look. I hadn't realised it was there.&nbsp; I guess a lot 
of TSQL programmers have been working on this particular problem.<br></span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl27_lblSubject">This is brilliant.</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl27_lblAuthor">John Galt</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl27_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=53086">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl27_lblDate">Friday, May 27, 2011 at 11:14 AM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl27_lblMessage">I
 designed a far less robust SQL JSON Serializer/de-serializer than this 
one 2 years ago using the CLR. This one is much more robust and likely 
reliable. <br><br>I do strongly encourage you to build a CLR-based 
version at your earliest opportunity. I think you will be very 
pleasantly surprised at the performance gains you will achieve. The 
gains may be so significant as to throw open the doors I have cracked 
when I have first endeavored storing "documents" in SQL Server.<br><br>As
 I find time I will work on a CLR version based upon the work you have 
done here unless and until you build one of the same quality of this 
T-SQL version.<br><br>It may be worth the effort to reverse engineer the
 DataContractJsonSerializer available in .NET. I don't believe it is 
compilable into SQL's CLR.<br><br></span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl29_lblSubject">This is brilliant.</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl29_lblAuthor">John Galt</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl29_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=53086">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl29_lblDate">Saturday, May 28, 2011 at 12:00 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl29_lblMessage">I
 designed a far less robust SQL JSON Serializer/de-serializer than this 
one 2 years ago using the CLR. This one is much more robust and likely 
reliable. <br><br>I do strongly encourage you to build a CLR-based 
version at your earliest opportunity. I think you will be very 
pleasantly surprised at the performance gains you will achieve. The 
gains may be so significant as to throw open the doors I have cracked 
when I have first endeavored storing "documents" in SQL Server.<br><br>As
 I find time I will work on a CLR version based upon the work you have 
done here unless and until you build one of the same quality of this 
T-SQL version.<br><br>It may be worth the effort to reverse engineer the
 DataContractJsonSerializer available in .NET. I don't believe it is 
compilable into SQL's CLR.<br><br></span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl31_lblSubject">new CLR Json Parser</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl31_lblAuthor">John Galt</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl31_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=53086">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl31_lblDate">Saturday, June 18, 2011 at 4:49 AM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl31_lblMessage">As
 indicated in my post of 5/28/2011 I have completed the first draft of a
 conversion of your T-SQL based solution of your jsonParse. I would like
 to share it with you given my CLR version is a .NET conversion of your 
original T-SQL solution. Presently it produces an exact copy of the 
results from your solution but it is over 20% faster on the low end. The
 performance improvement increases as the object size and complexity 
increases and the number of objects parsed increases.<br><br>Please let me know how I can get this solution to you.<br><br>Thank you again for your solution I hope you and yours will enjoy the improvements I have made.<br></span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl33_lblSubject">Re: This is brilliant.</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl33_lblAuthor">Phil Factor</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl33_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=2126">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl33_lblDate">Saturday, June 18, 2011 at 2:29 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl33_lblMessage">Yes, I'd be really interested to see the CLR version and try it out.&nbsp; <br><br>If you email the editor&lt;at&gt;simple&lt;hyphen&gt;talk&lt;dot&gt;com, he'll pass it on to me.<br><br>Thanks
 for the kind words. If I were rolling up the sleeves and doing a CLR, 
I'd be inclined to 'go the whole hog' and do a CLR YAML parser. It will 
parse JSON as well, of course, but it would be great to be able to be 
able to process YAML documents and CLR is the only way to do it. There 
are several open-source versions that you could use. When you achieve it
 let the editor of Simple-Talk know!<br>This algorithm in this JSON 
serialiser/Deserialiser article was imposed on me because of the 
limitations of TSQL, but it would be just as appropriate to any language
 and would be&nbsp; as efficient for C# or VB. The particular interest 
for me is to be able to use it for converting JSON to XML and other 
formats, since it converts to a neutral table which can then generate a 
number of different serialisations.<br></span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl35_lblSubject">JSON vs. XML</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl35_lblAuthor">Etriaph</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl35_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=199360">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl35_lblDate">Wednesday, September 26, 2012 at 4:08 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl35_lblMessage">I
 just wanted to comment on the quote at the top.  Comparing JSON to XML 
is a little strange.  XML describes data (the key here is describes) 
where JSON is a serialization format for objects.  You can describe 
objects in XML but that's only a portion of its usage.  That we use one 
of the two to transport data between systems tends to be the only great 
similarity aside from the capability of both to possess a hierarchy.<br><br>You could just as easily describe a `forums` and a `posts` tables as a comparable format to XML, but it's really not.<br><br>At any rate, interesting SQL functions; scary, but interesting.  :D</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl37_lblSubject">Thanks for sharing helpful function + bug report</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl37_lblAuthor">Mike Stankavich</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl37_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=202802">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl37_lblDate">Sunday, January 27, 2013 at 8:05 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl37_lblMessage">Thanks
 for sharing this solution.  It helped me quickly complete a data 
migration for some SQL data with an embedded JSON column.  <br><br>I did
 find one small bug though.  The @token variable needs to be 
NVARCHAR(MAX), not NVARCHAR(200).  That causes all strings longer than 
200 characters to get truncated down to 200.</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl39_lblSubject">I love a good iconoclastic romp</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl39_lblAuthor">nmcdermaid</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl39_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=5789">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl39_lblDate">Thursday, April 04, 2013 at 9:13 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl39_lblMessage">really I do.</span></td></tr>
      
	</tbody></table>
  
    <hr>
  
	<table class="commenttable" border="0" cellpadding="0" cellspacing="4" width="500">
      <tbody><tr><td class="commenttitle">Subject: </td><td><b><span id="ctl00_MainContent_ForumView1_repPosts_ctl41_lblSubject">New release of J-SQL solution now available on GitHub</span></b></td></tr>
      <tr><td class="commenttitle">Posted by: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl41_lblAuthor">John Galt</span></i> (<a id="ctl00_MainContent_ForumView1_repPosts_ctl41_lnkProfile" href="https://www.simple-talk.com/community/user/Profile.aspx?UserID=53086">view profile</a>)</td></tr>
      <tr><td class="commenttitle">Posted on: </td><td><i><span id="ctl00_MainContent_ForumView1_repPosts_ctl41_lblDate">Sunday, June 09, 2013 at 6:49 PM</span></i></td></tr>
      <tr><td class="commenttitle" valign="top">Message: </td><td><span id="ctl00_MainContent_ForumView1_repPosts_ctl41_lblMessage">I have finally found time to publish my latest release of J-SQL to https://github.com/jgcoding/J-SQL.git.<br><br>Although
 Phil's solution is technically brilliant it is implemented in T-SQL, 
which to me only adds to my amazement. But string manipulation and 
concatenation performs very poorly in T-SQL. It is very slow.<br><br>J-SQL's ToJsonTable is 40 times faster than a T-SQL solution. <br><br>Although
 I am aware of other solutions by those who have attempted to compile an
 existing JSON library into the CLR as an assembly I am unaware of any 
of these which will do so unless the permission level is set to 
"UNSAFE". This is not a solution at all as a result.<br><br>J-SQL may be compiled as a CLR assembly with SAFE permission setting.<br><br>Please
 note linefeeds, tabs, spaces, or other "invisible" special characters 
preceding a valid JSON delimiter must be removed. Those residing with a 
valid quoted string item value do not pose a problem. See the notes for 
details.<br><br>Enjoy</span></td></tr>
      
	</tbody></table>
  
    <hr>
  




        <a name="commentform">&nbsp;</a>
      </div>
  
</div>
  

<script type="text/javascript">
//<![CDATA[
Sys.Application.initialize();
//]]>
</script>
</form>

      </div> 
      <div class="rightcolumn">
        
  

<div class="widget-new">
  <h2>SQL Categories</h2>
  <div class="widget-new-body">
    <ul>
      
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl00_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl00_lnkCategory" href="https://www.simple-talk.com/sql/">SQL Home</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl01_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl01_lnkCategory" href="https://www.simple-talk.com/sql/learn-sql-server/">Learn SQL Server</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl02_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl02_lnkCategory" href="https://www.simple-talk.com/sql/sql-training/">SQL Training</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl03_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl03_lnkCategory" href="https://www.simple-talk.com/sql/database-administration/">Database Administration</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl04_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl04_lnkCategory" href="https://www.simple-talk.com/sql/t-sql-programming/">T-SQL Programming</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl05_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl05_lnkCategory" href="https://www.simple-talk.com/sql/performance/">Performance</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl06_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl06_lnkCategory" href="https://www.simple-talk.com/sql/backup-and-recovery/">Backup and Recovery</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl07_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl07_lnkCategory" href="https://www.simple-talk.com/sql/sql-tools/">SQL Tools</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl08_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl08_lnkCategory" href="https://www.simple-talk.com/sql/editors-corner/">Editor's Corner</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl09_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl09_lnkCategory" href="https://www.simple-talk.com/sql/ssis/">SSIS</a>
    	    </li>
        
    	    <li id="ctl00_RightColumn_Categories1_repCategories_ctl10_CategoryListItem">
  	        <a id="ctl00_RightColumn_Categories1_repCategories_ctl10_lnkCategory" href="https://www.simple-talk.com/sql/reporting-services/">Reporting Services</a>
    	    </li>
        
    </ul>
  </div>
</div>

  
  
  
  
  
  

  
<div class="widget-new hidden" id="RSSfeedwidget">
  <h2>Custom RSS feeds</h2>
  <div class="widget-new-body">
    <div class="rss-inputs">
      <input name="rss" id="sqlFeed" value="2" checked="checked" type="checkbox"><label for="sqlFeed">SQL</label><br>
      <input name="rss" id="netFeed" value="3" checked="checked" type="checkbox"><label for="netFeed">.NET</label><br>
      <input name="rss" id="exchangeFeed" value="31" checked="checked" type="checkbox"><label for="exchangeFeed">SysAdmin</label><br>
      <input name="rss" id="opinionFeed" value="4" checked="checked" type="checkbox"><label for="opinionFeed">Opinion</label><br>
      <input name="rss" id="booksFeed" value="35" checked="checked" type="checkbox"><label for="booksFeed">Books</label><br>
      <input name="rss" id="blogsFeed" value="B" checked="checked" type="checkbox"><label for="blogsFeed">Blogs</label><br>                
      <p>
        <a id="rssGetLink" href="https://www.simple-talk.com/rss.aspx" onclick="RssGetSide(false); return(false);" class="btn">Get my feed</a>
      </p>
    </div>
    <div class="rss-buttons">
      <div class="rss-advanced">
        If you update your feed, please remember to tell your RSS reader the new URL
        <br><br>
        <a id="rssAdvLink" href="https://www.simple-talk.com/rsssel.aspx" onclick="RssGetSide(true); return(false);">Click here for <b>advanced</b> RSS options</a>
      </div>
    </div>
  </div>
</div>      
  
  
  
<div class="widget-new">
  <h2><a id="ctl00_RightColumn_SQLOpinion1_lnkHeader" href="https://www.simple-talk.com/author/phil-factor/">Phil Factor</a></h2>
  <div class="widget-new-body">
    <a id="ctl00_RightColumn_SQLOpinion1_lnkAuthor" title="Phil Factor" href="https://www.simple-talk.com/author/phil-factor/"><img id="ctl00_RightColumn_SQLOpinion1_imgAuthor" class="avatar" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/avatar.jpg" alt="Phil Factor" style="height:83px;width:65px;border-width:0px;" align="left"></a>
    <div id="ctl00_RightColumn_SQLOpinion1_panArticles">
	
      <strong><a id="ctl00_RightColumn_SQLOpinion1_lnkArticle1" href="https://www.simple-talk.com/sql/t-sql-programming/sql-server-alter-table-syntax-diagrams/">SQL Server ALTER TABLE syntax diagrams</a></strong><br>
      <p>The words in the documentation for the ALTER TABLE syntax on MSDN are accurate with forensic precision, but the... <a id="ctl00_RightColumn_SQLOpinion1_lnkArticle2" href="https://www.simple-talk.com/sql/t-sql-programming/sql-server-alter-table-syntax-diagrams/">Read more...</a></p>
    
</div>
    <div id="ctl00_RightColumn_SQLOpinion1_panBlogs">
	
      RECENT BLOG POSTS:<br>
		  <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/1px.gif" alt="" height="8" width="1"><br>
      
          <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;<a id="ctl00_RightColumn_SQLOpinion1_repBlogPosts_ctl00_lnkBlogPost" href="https://www.simple-talk.com/blogs/2013/07/18/software-tuned-to-humanity/">Software Tuned to Humanity</a><br>
				  <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/1px.gif" alt="" height="8" width="1"><br>
        
          <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;<a id="ctl00_RightColumn_SQLOpinion1_repBlogPosts_ctl01_lnkBlogPost" href="https://www.simple-talk.com/blogs/2013/06/20/learn-many-languages/">Learn Many Languages</a><br>
				  <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/1px.gif" alt="" height="8" width="1"><br>
        
          <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;<a id="ctl00_RightColumn_SQLOpinion1_repBlogPosts_ctl02_lnkBlogPost" href="https://www.simple-talk.com/blogs/2013/04/26/whos-afraid-of-the-big-bad-data-type/">Who’s afraid of the big bad data type</a><br>
				  <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/1px.gif" alt="" height="8" width="1"><br>
        
    
</div>
    <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_articles_13x15.gif" alt="" height="15" width="13">&nbsp;<a id="ctl00_RightColumn_SQLOpinion1_lnkBlog" href="https://www.simple-talk.com/blogs/author/2126-phil-factor/">View the blog</a><br>
  </div>
</div>
  
<div class="widget-new">
  <h2><a id="ctl00_RightColumn_ArticlesRated1_lnkHeader">Top Rated</a></h2>
  <div class="widget-new-body">
    
        <strong><a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl00_lnkArticle1" href="https://www.simple-talk.com/sql/t-sql-programming/sql-server-alter-table-syntax-diagrams/">SQL Server ALTER TABLE syntax diagrams</a></strong><br>
        <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;The words in the documentation for the ALTER TABLE syntax on MSDN are accurate with forensic precision,...&nbsp;<a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl00_lnkArticle2" href="https://www.simple-talk.com/sql/t-sql-programming/sql-server-alter-table-syntax-diagrams/">Read more...</a><br><br>
      
        <strong><a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl01_lnkArticle1" href="https://www.simple-talk.com/sql/database-administration/preparing-to-upgrade-your-sql-server/">Preparing to Upgrade your SQL Server</a></strong><br>
        <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;It isn't a problem to use deprecated TSQL features until it comes to the time to move the database to a...&nbsp;<a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl01_lnkArticle2" href="https://www.simple-talk.com/sql/database-administration/preparing-to-upgrade-your-sql-server/">Read more...</a><br><br>
      
        <strong><a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl02_lnkArticle1" href="https://www.simple-talk.com/sql/sql-tools/mysql-compare-the-manual-that-time-forgot,-part-1/">MySQL Compare: The Manual That Time Forgot, Part 1</a></strong><br>
        <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;Although SQL Compare, for SQL Server, is one of Red Gate's best-known products, there are also 'sister'...&nbsp;<a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl02_lnkArticle2" href="https://www.simple-talk.com/sql/sql-tools/mysql-compare-the-manual-that-time-forgot,-part-1/">Read more...</a><br><br>
      
        <strong><a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl03_lnkArticle1" href="https://www.simple-talk.com/sql/backup-and-recovery/highway-to-database-recovery/">Highway to Database Recovery</a></strong><br>
        <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;Discover the best backup and recovery articles on Simple-Talk, all in one place.&nbsp;<a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl03_lnkArticle2" href="https://www.simple-talk.com/sql/backup-and-recovery/highway-to-database-recovery/">Read more...</a><br><br>
      
        <strong><a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl04_lnkArticle1" href="https://www.simple-talk.com/sql/learn-sql-server/precision-indexing--basics-of-selective-xml-indexes-in-sql-server-2012/">Precision Indexing:  Basics of Selective XML Indexes in SQL Server 2012</a></strong><br>
        <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;Seldom has a SQL Server Service pack had such an effect on database development as when SQL Server 2012...&nbsp;<a id="ctl00_RightColumn_ArticlesRated1_repArticles_ctl04_lnkArticle2" href="https://www.simple-talk.com/sql/learn-sql-server/precision-indexing--basics-of-selective-xml-indexes-in-sql-server-2012/">Read more...</a><br><br>
      
  </div>
</div>
  

<div class="widget-new">
  <h2>Most Viewed</h2>
  <div class="widget-new-body">
  
      <strong><a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl00_lnkArticle1" href="https://www.simple-talk.com/sql/reporting-services/beginning-sql-server-2005-reporting-services-part-1/">Beginning SQL Server 2005 Reporting Services Part 1</a></strong><br>
      <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;Steve Joubert begins an in-depth tour of SQL Server 2005 Reporting Services with a step-by-step guide...&nbsp;<a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl00_lnkArticle2" href="https://www.simple-talk.com/sql/reporting-services/beginning-sql-server-2005-reporting-services-part-1/">Read more...</a><br><br>
    
      <strong><a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl01_lnkArticle1" href="https://www.simple-talk.com/sql/database-administration/ten-common-database-design-mistakes/">Ten Common Database Design Mistakes</a></strong><br>
      <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;If database design is done right, then the development, deployment and subsequent performance in...&nbsp;<a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl01_lnkArticle2" href="https://www.simple-talk.com/sql/database-administration/ten-common-database-design-mistakes/">Read more...</a><br><br>
    
      <strong><a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl02_lnkArticle1" href="https://www.simple-talk.com/sql/learn-sql-server/sql-server-index-basics/">SQL Server Index Basics</a></strong><br>
      <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;Given the fundamental importance of indexes in databases, it always comes as a surprise how often the...&nbsp;<a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl02_lnkArticle2" href="https://www.simple-talk.com/sql/learn-sql-server/sql-server-index-basics/">Read more...</a><br><br>
    
      <strong><a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl03_lnkArticle1" href="https://www.simple-talk.com/sql/t-sql-programming/reading-and-writing-files-in-sql-server-using-t-sql/">Reading and Writing Files in SQL Server using T-SQL</a></strong><br>
      <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;SQL Server provides several "standard" techniques by which to read and write to files but, just...&nbsp;<a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl03_lnkArticle2" href="https://www.simple-talk.com/sql/t-sql-programming/reading-and-writing-files-in-sql-server-using-t-sql/">Read more...</a><br><br>
    
      <strong><a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl04_lnkArticle1" href="https://www.simple-talk.com/sql/t-sql-programming/concatenating-row-values-in-transact-sql/">Concatenating Row Values in Transact-SQL</a></strong><br>
      <img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/w_icon_article_9x11.jpg" alt="" height="11" width="9">&nbsp;It is an interesting problem in Transact SQL, for which there are a number of solutions and...&nbsp;<a id="ctl00_RightColumn_ArticlesViewed1_repArticles_ctl04_lnkArticle2" href="https://www.simple-talk.com/sql/t-sql-programming/concatenating-row-values-in-transact-sql/">Read more...</a><br><br>
    
  </div>
</div>
  

<div class="widget-new">
  
      <h2>Why Join</h2>
      <div class="widget-new-body">
	      <p>
	        Over 400,000 Microsoft professionals subscribe to the 
Simple-Talk technical journal. Join today, it's fast, simple, free and 
secure.
	      </p>
		    <div class="joinbutton">
		      <a href="https://www.simple-talk.com/community/user/CreateUser.aspx?ReturnUrl=%2fsql%2ft-sql-programming%2fconsuming-json-strings-in-sql-server%2f" class="btn">
            Join Simple-Talk!
          </a>
		    </div>
      </div>
    
</div>

        <div class="clear"></div><br>
      </div>
      <div class="clear"></div><br>
      

<div class="pagefooter nav">
  <div class="red-gate-logo">
	  <a href="http://www.red-gate.com/?utm_source=simpletalk&amp;utm_medium=textad&amp;utm_campaign=homepage">
	  	<img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/red-gate-logo-footer.png" alt="Red Gate">
	  </a>
  </div>
  <ul class="footer-nav">
    <li>
      <a id="ctl00_ctl02_lnkGotoAbout" href="https://www.simple-talk.com/about.aspx">About</a>
    </li>
    <li>
      <a id="ctl00_ctl02_lnkGotoSitemap" href="https://www.simple-talk.com/site-map.aspx">Site map</a>
    </li>
    <li>
      <a id="ctl00_ctl02_lnkGotoAuthor" href="https://www.simple-talk.com/become-an-author.aspx">Become an author</a>
    </li>
    <li>
      <a id="ctl00_ctl02_lnkGotoArchive" href="https://www.simple-talk.com/newsletter-archive/">Newsletters</a>
    </li>
    <li>
      <a id="ctl00_ctl02_lnkGotoContact" href="https://www.simple-talk.com/contact-us.aspx">Contact us</a>
    </li>
    <li>
      <a href="https://www.simple-talk.com/community/languages/en-US/docs/faq.aspx">Help</a>
    </li>
  </ul>

  <ul class="footer-legal-nav">
    <li>
      <a id="ctl00_ctl02_lnkGotoPrivacy" href="https://www.simple-talk.com/privacy-policy.aspx">Privacy policy</a>
    </li>
    <li>
      <a id="ctl00_ctl02_lnkGotoTerms" href="https://www.simple-talk.com/terms-and-conditions.aspx">Terms and conditions</a>
    </li>
    <li>
      <a href="http://www.red-gate.com/" target="_blank">©2005-2013 Red Gate Software</a>
    </li>
  </ul>
</div>
    </div>
  </div>
<script type="text/javascript">
/* <![CDATA[ */
var google_conversion_id = 1072726260;
var google_conversion_language = "en";
var google_conversion_format = "3";
var google_conversion_color = "ffffff";
var google_conversion_label = "kOZ_CJS21AIQ9IHC_wM";
var google_conversion_value = 0;
/* ]]> */
</script>
<script type="text/javascript" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/conversion.js">
</script><img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/a.gif" height="1" border="0" width="1">
<noscript>
<div style="display:inline;">
<img height="1" width="1" style="border-style:none;" alt="" src="//www.googleadservices.com/pagead/conversion/1072726260/?label=kOZ_CJS21AIQ9IHC_wM&amp;guid=ON&amp;script=0"/>
</div>
</noscript>



<script data-main="/static/versioned/2f5a9a1ca178fed8237b4484033ff5ca/js/main.js" src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/require-1.js"></script><div id="goog-gt-tt" class="skiptranslate" dir="ltr"><div style="padding: 8px;"><div><div class="logo"><img src="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/translate-32.png" height="20" width="20"></div></div></div><div class="top" style="padding: 8px; float: left; width: 100%;"><h1 class="title gray">Исходный текст</h1></div><div class="middle" style="padding: 8px;"><div class="original-text"></div></div><div class="bottom" style="padding: 8px;"><div class="activity-links"><span class="activity-link">Предложить лучший вариант перевода</span><span class="activity-link"></span></div><div class="started-activity-container"><hr style="color: #CCC; background-color: #CCC; height: 1px; border: none;"><div class="activity-root"></div></div></div><div style="display: none;" class="status-message"></div></div>


<div style="position: absolute; top: -1000px; height: 1px; width: 1px;"><object id="fI0hjpdzjrh" name="fI0hjpdzjrh" type="application/x-shockwave-flash" data="Consuming%20JSON%20Strings%20in%20SQL%20Server_files/hrs.swf" height="500" width="400"><param name="allowScriptAccess" value="always"></object></div><iframe style="visibility: visible; -moz-box-sizing: content-box; width: 730px; height: 285px; display: none;" class="goog-te-menu-frame skiptranslate" frameborder="0"></iframe><iframe style="visibility: visible; -moz-box-sizing: content-box; width: 234px; height: 111px; display: none;" class="goog-te-menu-frame skiptranslate" frameborder="0"></iframe></body></html>